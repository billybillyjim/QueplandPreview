@inject GameState  GameState
@inject MessageManager  MessageManager
@using System.Threading
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@implements IDisposable

@LoadNavbarTop()

@LoadNavbar()

@functions {
    bool collapseNavMenu = false;
    private bool debugMode = false;

    private Area lastToggledArea;
    string autoSaveString = "Last autosave: Never";
    string test = "total";
    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private SimpleAES Encryptor = new SimpleAES();

    private bool loadGameComplete;

    private string GetURL(string areaURL)
    {
        return "GatherMenu/" + areaURL;
    }
    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private RenderFragment LoadNavbarTop()
    {
        return builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "top-row pl-4 navbar navbar-dark");
            builder.OpenElement(2, "a");
            builder.AddAttribute(3, "class", "navbar-brand");
            if(GameState.CanLeave())
            {
                builder.AddAttribute(4, "href", "");
            }
            builder.AddAttribute(5, "style", "color:white");
            builder.AddContent(6, "Quepland Menu");
            builder.CloseElement();

            builder.CloseElement();

        };
    }

    private RenderFragment LoadNavbar()
    {
        return builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", NavMenuCssClass);
            builder.AddAttribute(2, "onclick", new Action(() => ToggleNavMenu()));
            builder.OpenElement(3, "ul");
            builder.AddAttribute(4, "class", "nav flex-column");

            if (GameState.CanLeave() && Program.areaManager != null)
            {
                //Make the bank link
                builder.OpenElement(5, "li");
                builder.AddAttribute(6, "class", "nav-item px-3");
                builder.OpenComponent<NavLink>(7);
                builder.AddAttribute(8, "class", "nav-link");
                builder.AddAttribute(9, "href", "/Bank");
                builder.AddAttribute(10, "ChildContent", (RenderFragment)((builder2) =>
                {
                    builder2.OpenElement(11, "span");
                    builder2.AddAttribute(12, "class", "oi oi-dollar");
                    builder2.AddAttribute(13, "aria-hidden", "true");
                    builder2.CloseElement();
                    builder2.AddContent(14, "Bank");
                }));
                builder.CloseComponent();
                builder.CloseElement();
                if (debugMode)
                {
                    //Make the house link
                    builder.OpenElement(5, "li");
                    builder.AddAttribute(6, "class", "nav-item px-3");
                    builder.OpenComponent<NavLink>(7);
                    builder.AddAttribute(8, "class", "nav-link");
                    builder.AddAttribute(9, "href", "/House");
                    builder.AddAttribute(10, "ChildContent", (RenderFragment)((builder2) =>
                    {
                        builder2.OpenElement(11, "span");
                        builder2.AddAttribute(12, "class", "oi oi-basket");
                        builder2.AddAttribute(13, "aria-hidden", "true");
                        builder2.CloseElement();
                        builder2.AddContent(14, "Home");
                    }));
                    builder.CloseComponent();
                    builder.CloseElement();
                }
                if (GameState.currentRegion != "Quepland")
                {
                    //Make the house link
                    builder.OpenElement(5, "li");
                    builder.AddAttribute(6, "class", "nav-item px-3");
                    builder.OpenComponent<NavLink>(7);
                    builder.AddAttribute(8, "class", "nav-link");
                    builder.AddAttribute(9, "href", "/GatherMenu/" + GameState.previousArea);
                    builder.AddAttribute(10, "onclick", new Action(() => SetRegion("Quepland")));
                    builder.AddAttribute(10, "ChildContent", (RenderFragment)((builder2) =>
                    {
                        builder2.OpenElement(11, "span");
                        builder2.AddAttribute(12, "class", "oi oi-action-undo");
                        builder2.AddAttribute(13, "aria-hidden", "true");
                        builder2.CloseElement();
                        builder2.AddContent(14, "Return to Quepland");
                    }));
                    builder.CloseComponent();
                    builder.CloseElement();
                }

                foreach (Area area in Program.areaManager.GetAreasWithChildren())
                {
                    if (area.IsUnlocked && area.Region == GameState.currentRegion)
                    {
                        builder.AddContent(15, ParentButton(area));
                        foreach (string child in area.Children)
                        {
                            Area childArea = Program.areaManager.GetAreaByURL(child);
                            if (childArea.IsUnlocked && childArea.Hidden == false)
                            {
                                builder.AddContent(17, NavButton(childArea, false));
                            }
                        }
                    }
                }
            }
            else if (GameState.isHunting)
            {
                Area childArea = Program.areaManager.GetAreaByID(GameState.huntingAreaID);
                builder.AddContent(17, NavButton(childArea, false));

            }
            builder.CloseElement();
            builder.CloseElement();
            if (loadGameComplete == false && GameState.saveDataLoaded == true)
            {
                HideAllChildren();
                loadGameComplete = true;
            }
        };
    }
    private RenderFragment NavButton(Area area, bool bold)
    {
        return builder =>
        {
            builder.OpenElement(0, "li");
            builder.AddAttribute(1, "class", "nav-item px-3");
            builder.OpenComponent<NavLink>(2);
            builder.AddAttribute(3, "class", "nav-link");

            if (area.ActionRequiredForAccess != null &&
                GameState.GetPlayer().HasItemToAccessArea(area.ActionRequiredForAccess) == false)
            {
                builder.AddAttribute(4, "href", "/GatherMenu/" + area.RedirectAreaURL);
                builder.AddAttribute(5, "onclick", new Action(() => MessageManager.AddMessage("You don't have the item to access this location.(" + area.ActionRequiredForAccess + ")", "red")));
                builder.AddAttribute(6, "title", "You do not have the item to access this location.(" + area.ActionRequiredForAccess + ")");
                builder.AddAttribute(7, "style", "background-color:#EC565650");
            }
            else
            {
                builder.AddAttribute(7, "href", "/GatherMenu/" + area.AreaURL);
            }

            builder.AddAttribute(12, "ChildContent", (RenderFragment)((builder2) =>
            {
                builder2.OpenElement(13, "span");
                builder2.AddAttribute(14, "class", area.Icon);
                builder2.AddAttribute(15, "aria-hidden", "true");
                builder2.CloseElement();
                builder2.OpenElement(16, "span");
                builder2.AddContent(18, area.Name);
                builder2.CloseElement();
                bool hasRoadblock = false;
                int numOfRoadblocks = 0;
                foreach (string a in area.UnlockableAreas ?? Enumerable.Empty<string>())
                {
                    if (Program.areaManager.GetAreaByName(a.Split(',')[0]).IsUnlocked == false)
                    {
                        hasRoadblock = true;
                        numOfRoadblocks++;
                    }
                }
                if (hasRoadblock)
                {
                    builder2.OpenElement(19, "div");
                    builder2.AddAttribute(20, "class", "badge badge-pill badge-success");
                    builder2.AddAttribute(21, "style", "margin-left:3px");
                    builder2.AddContent(22, "" + numOfRoadblocks);
                    builder2.CloseElement();
                }
                else if(area.AccessibleRegions != null && area.AccessibleRegions != "")
                {
                    builder2.OpenElement(23, "div");
                    builder2.AddAttribute(24, "class", "badge badge-pill badge-success");
                    builder2.AddAttribute(25, "style", "margin-left:3px");
                    builder2.AddContent(26, ".");
                    builder2.CloseElement();
                }

            }));
            builder.CloseComponent();
            builder.CloseElement();
        };

    }

    private RenderFragment ParentButton(Area area)
    {
        return builder =>
        {
            builder.OpenElement(0, "li");
            builder.AddAttribute(1, "class", "nav-item px-3");

            builder.AddAttribute(2, "style", "background-color:#FFFFFF33; padding-top:10px; cursor:pointer");
            builder.AddAttribute(4, "onclick", new Action(() => ToggleAreaChildren(area)));

            builder.OpenElement(5, "span");
            builder.AddAttribute(6, "class", area.Icon);
            builder.AddAttribute(7, "aria-hidden", "true");
            builder.AddAttribute(8, "style", "color:white");
            builder.CloseElement();
            builder.OpenElement(8, "span");

            builder.AddAttribute(9, "style", "font-size: large; font-weight: bold; color:white");
            builder.AddContent(12, area.Name);
            builder.CloseElement();


            builder.CloseElement();
        };

    }
    private void SetRegion(string region)
    {
        GameState.currentRegion = region;
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
        this.StateHasChanged();
    }

    public void HideAllChildren()
    {
        foreach (Area area in Program.areaManager.GetAreasWithoutChildren())
        {
            area.Hidden = true;
        }
        StateHasChanged();
    }
    public void ToggleAreaChildren(Area area)
    {
        if(lastToggledArea != area)
        {
            HideAllChildren();
        }


        area.IsShowingChildren = !area.IsShowingChildren;
        foreach (string child in area.Children)
        {
            Program.areaManager.GetAreaByURL(child).Hidden = !Program.areaManager.GetAreaByURL(child).Hidden;
        }
        lastToggledArea = area;
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }

    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}

@inject GameState GameState
@inject MessageManager MessageManager
@implements IDisposable
@using System.Threading

@if (petToShow == null)
{
    @LoadPetMenu()
}
else
{
    @LoadPetInfoMenu()
}


@functions{

    [Parameter]
    private int splitViewPosition { get; set; }
    private Pet petToShow;

    private RenderFragment LoadPetMenu()
    {
        return builder =>
        {

            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "table-hover");




            builder.OpenComponent<MenuButtons>(2);
            builder.AddAttribute(2, "splitViewPosition", splitViewPosition);
            builder.CloseComponent();



            builder.OpenElement(4, "table");
            builder.AddAttribute(5, "style", "width:100%");
            builder.OpenElement(6, "thead");
            builder.OpenElement(7, "tr");
            builder.OpenElement(8, "th");
            builder.AddAttribute(9, "align", "left");
            builder.AddContent(10, "Pet");
            builder.CloseElement();

            builder.OpenElement(11, "th");
            builder.AddContent(12, "Total Level");
            builder.CloseElement();
            builder.OpenElement(11, "th");
            builder.AddContent(12, "Affinity");
            builder.CloseElement();
            builder.OpenElement(11, "th");
            builder.AddContent(12, "Highest Level");
            builder.CloseElement();
            builder.OpenElement(13, "th");
            builder.AddAttribute(14, "text-align", "right");
            builder.AddContent(15, "Assign");
            builder.CloseElement();
            builder.CloseElement();
            builder.CloseElement();
            builder.OpenElement(16, "tbody");
            if (GameState.GetPlayer() != null)
            {
                foreach (Pet pet in GameState.GetPlayer().Pets)
                {

                    builder.AddContent(17, LoadPet(pet));

                }
                if(GameState.GetPlayer().Pets.Count == 0)
                {
                    builder.OpenElement(17, "tr");
                    builder.OpenElement(17, "td");
                    builder.AddContent(17, "You don't have any pets. Visit the pet store near Mount Queple to buy one.");
                    builder.CloseElement();
                    builder.CloseElement();
                }
            }
            builder.CloseElement();
            builder.CloseElement();

            builder.CloseElement();

        };
    }
    private RenderFragment LoadPet(Pet pet)
    {
        return builder =>
        {
            builder.OpenElement(17, "tr");
            builder.AddAttribute(17, "class", "skill-table");
            if(GameState.GetPlayer().activePet != null && GameState.GetPlayer().activePet.Name == pet.Name)
            {
                builder.AddAttribute(17, "style", "background-color:aquamarine");
            }
            builder.OpenElement(18, "td");
            builder.AddAttribute(18, "onclick", new Action(() => ShowPetInfo(pet)));
            builder.AddAttribute(19, "title", pet.Affinity);
            builder.AddAttribute(20, "style", "cursor:pointer");
            builder.AddContent(21, pet.Name);
            builder.CloseElement();
            builder.OpenElement(18, "td");
            builder.AddContent(19, pet.GetTotalLevels());
            builder.CloseElement();
            builder.OpenElement(18, "td");
            builder.AddContent(19, pet.Affinity);
            builder.CloseElement();
            builder.OpenElement(18, "td");
            if(pet.GetHighestSkill() != null)
            {
                builder.AddAttribute(19, "title", "" + Extensions.GetExperienceRequired(pet.GetHighestSkill().GetSkillLevelUnboosted()) + " exp to level");
                builder.AddContent(19, pet.GetHighestSkill().Name + "(" + pet.GetHighestSkill().GetSkillLevelUnboosted() + ")");
            }
            else
            {
                builder.AddContent(19, "Untrained");
            }
            builder.CloseElement();
            builder.OpenElement(18, "td");
            builder.OpenElement(18, "button");
            builder.AddAttribute(18, "class", "btn btn-primary");
            builder.AddAttribute(18, "style", "");
            if (GameState.GetPlayer().activePet == null || GameState.GetPlayer().activePet.Name != pet.Name)
            {
                builder.AddAttribute(18, "onclick", new Action(() => AssignPet(pet)));
                builder.AddContent(18, "Assign");
            }
            else
            {
                builder.AddAttribute(18, "disabled", true);
                builder.AddAttribute(18, "title", "This pet is already following you.");
                builder.AddContent(18, "Assign");
            }
            builder.CloseElement();
            builder.CloseElement();
            builder.CloseElement();
        };
    }
    private RenderFragment LoadPetInfoMenu()
    {
        return builder =>
        {

            builder.OpenComponent<MenuButtons>(0);
            builder.CloseComponent();


            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "buddy-top");
            builder.OpenElement(2, "h1");
            builder.AddAttribute(3, "title", petToShow.Description);
            builder.AddAttribute(4, "style", "text-align:left;font-weight:bold;line-height:40px;display:flex");
            builder.OpenElement(5, "img");
            builder.AddAttribute(6, "src", "data/ItemIcons/"+ petToShow.Name + ".png");
            builder.AddAttribute(7, "style", "width:100px;height:100px;opacity:1");
            //Close 6 img
            builder.CloseElement();

            builder.AddContent(8, petToShow.Name);

            //Close 3 td
            builder.CloseElement();
            builder.OpenElement(9, "button");
            builder.AddAttribute(10, "class", "btn btn-primary");
            builder.AddAttribute(11, "style", "");
            builder.AddAttribute(12, "onclick", new Action(() => HidePetInfo()));
            builder.AddContent(13, "Back");
            builder.CloseElement();
            builder.OpenElement(14, "div");
            builder.AddContent(15, petToShow.Description);

            //Close 11 td, 12 button
            builder.CloseElement();
            builder.AddContent(16, LoadSkills(petToShow));

            builder.CloseElement();
        };
    }
    private RenderFragment LoadSkills(Pet petToShow)
    {
        return builder =>
        {
            builder.OpenElement(2, "h1");
            builder.AddContent(3, "Skills");
            builder.CloseElement();
            builder.OpenElement(4, "p");
            builder.AddContent(4, "Total Level:" + petToShow.GetTotalLevels());
            builder.CloseElement();
            builder.OpenElement(4, "table");
            builder.AddAttribute(5, "style", "width:100%");
            builder.OpenElement(6, "thead");
            builder.OpenElement(7, "tr");
            builder.OpenElement(8, "th");
            builder.AddAttribute(9, "align", "left");
            builder.AddContent(10, "Skill");
            builder.CloseElement();

            builder.OpenElement(11, "th");
            builder.AddContent(12, "Experience");
            builder.CloseElement();

            builder.OpenElement(13, "th");
            builder.AddAttribute(14, "text-align", "right");
            builder.AddContent(15, "Level");
            builder.CloseElement();
            builder.CloseElement();
            builder.CloseElement();
            builder.OpenElement(16, "tbody");

            foreach (Skill skill in petToShow.skills)
            {
                builder.OpenElement(17, "tr");
                builder.AddAttribute(18, "class", "skill-table");
                builder.OpenElement(19, "td");
                builder.AddAttribute(19, "title", "Boosts experience gain by " + petToShow.GetSkillBoost(skill) + "x");
                builder.OpenElement(20, "img");

                if (skill.IsBlocked)
                {
                    builder.AddAttribute(21, "src", "/data/ItemIcons/Lock.png");

                }
                else
                {
                    builder.AddAttribute(21, "src", "/data/ItemIcons/Unlock.png");
                }
                builder.AddAttribute(22, "style", "height:20px;width:20px;");
                builder.AddAttribute(22, "onclick", new Action(() => ToggleSkillBlock(skill)));
                builder.CloseElement();

                builder.AddContent(23, skill.Name);
                builder.CloseElement();

                builder.OpenElement(24, "td");
                builder.OpenElement(25, "div");
                builder.AddAttribute(26, "class", "progress");
                if (skill.GetSkillLevel() == 1)
                {
                    builder.AddAttribute(27, "title", "Exp to Next Level: " + (Extensions.GetExperienceRequired(1) - skill.Experience));
                }
                else
                {
                    builder.AddAttribute(27, "title", "Exp to Next Level: " + (Extensions.GetExperienceRequired(skill.GetSkillLevelUnboosted()) - skill.Experience));
                }

                builder.OpenElement(28, "div");
                if (skill.IsBlocked)
                {
                    builder.AddAttribute(29, "class", "progress-bar bg-danger");
                }
                else
                {
                    builder.AddAttribute(29, "class", "progress-bar bg-success");
                }
                
                builder.AddAttribute(30, "style", GetWidthString(skill));
                builder.AddAttribute(31, "role", "progressbar");
                builder.AddAttribute(32, "aria-valuenow", GetValueString(skill));
                builder.AddAttribute(33, "aria-valuemin", "0");
                builder.AddAttribute(34, "aria-valuemax", "100");

                builder.OpenElement(35, "font");
                builder.AddAttribute(36, "color", "black");

                builder.AddContent(37, skill.Experience);
                builder.CloseElement();
                builder.CloseElement();

                builder.CloseElement();
                builder.CloseElement();

                builder.OpenElement(35, "tr");
                builder.AddContent(36, skill.GetSkillLevel());
                builder.CloseElement();

                builder.CloseElement();

            }

            builder.CloseElement();
            builder.CloseElement();
        };
    }
    private string GetWidthString(Skill skill)
    {
        return "width: " + Extensions.GetProgressForLevel(skill.Experience, skill.GetSkillLevel()) + "%";
    }
    private string GetValueString(Skill skill)
    {
        return "" + Extensions.GetProgressForLevel(skill.Experience, skill.GetSkillLevel());
    }
    private void AssignPet(Pet pet)
    {
        GameState.GetPlayer().activePet = pet;
        StateHasChanged();
    }
    private void ShowPetInfo(Pet pet)
    {
        petToShow = pet;
        StateHasChanged();
    }
    private void HidePetInfo()
    {
        petToShow = null;
        StateHasChanged();
    }
    private void ToggleSkillBlock(Skill skill)
    {
        skill.IsBlocked = !skill.IsBlocked;
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnInventoryStateChanged;
        this.StateHasChanged();
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnInventoryStateChanged;
    }

    void OnInventoryStateChanged(object sender, EventArgs e) => StateHasChanged();
}


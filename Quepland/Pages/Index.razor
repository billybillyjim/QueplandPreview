@page "/"
@inject HttpClient Http
@inject GameState GameState
@inject MessageManager MessageManager
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject Blazored.LocalStorage.ILocalStorageService asyncLocalStorage
@using System.Threading;
@implements IDisposable


<h1>Hello, Welcome to Quepland!</h1>

@if (GameState.safeToLoad)
{
    @if (debugMode)
    {
        @testString
        <p><button class="btn btn-primary" onclick="@(new Action(() => DebugAll99s()))">Max Account</button></p>
        <p><button class="btn btn-primary" onclick="@(new Action(() => DebugUnlockAllFollowers()))">Unlock Followers</button></p>
        <p><button class="btn btn-primary" onclick="@(new Action(() => DebugGetMoney()))">Gain Money</button></p>
        <p><button class="btn btn-primary" onclick="@(new Action(() => DebugOneOfEveryItem()))">Get All Items</button></p>
        <p><button class="btn btn-primary" onclick="@(new Action(() => DebugGainStrengthLevel()))">Gain Strength Level</button></p>
        <p><button class="btn btn-primary" onclick="@(new Action(() => SaveDataEncrypted())))">Save Encrypted</button></p>
        <p><button class="btn btn-primary" onclick="@(new Action(() => LoadDataEncrypted()))">Load Encrypted</button></p>
        <p><button class="btn btn-primary" onclick="@(new Action(() => DebugUnlockAllAreas()))">Unlock All Areas</button></p>
        <p>Item ID:<input type="number" @bind-value="@itemID" @bind-value:event="onchange" /></p>
        <p>Amount:<input type="number" @bind-value="@amount" @bind-value:event="onchange" /></p>
        <p><button class="btn btn-primary" onclick="@(new Action(() => GetItem()))">Get Item</button></p>
        <p>Skill:<input type="text" @bind-value="@skill" @bind-value:event="onchange" /></p>
        <p>Level:<input type="number" @bind-value="@skillLevel" @bind-value:event="onchange" /></p>
        <p><button class="btn btn-primary" onclick="@(new Action(() => DebugSetLevel(skill, skillLevel)))">Set Skill To Level</button></p>
    }

    @if (GameState.saveDataLoaded == false && saveGameExists && gameHasBeenSaved == false && loadBegun == false)
    {
        <p><button class="btn btn-primary" onclick="@(new Action(() => LoadData()))">Load Game</button></p>

    }
    else
    {
        <p>Click the bank on your left to begin your journey. You'll find an axe to start off.</p>
        <p><button class="btn btn-primary" disabled onclick="@(new Action(() => LoadData()))">Load Game</button></p>
    }
    @if (Program.playfabManager.IsConnected)
    {
        <p><button class="btn btn-primary" onclick="@(new Action(() => LoadDataFromCloud()))">Load From Cloud</button></p>
    }
    @if (GameState.saveGameExists == false || (GameState.saveDataLoaded == true))
    {
        <p><button class="btn btn-primary" onclick="@(new Action(() => SaveData()))">Save Game</button></p>
        @if (Program.playfabManager.IsConnected)
        {
            <p><button class="btn btn-primary" onclick="@(new Action(() => SaveToCloud()))">Save Game To Cloud</button></p>
        }

    }
    else
    {
        <p><button class="btn btn-primary" disabled onclick="@(new Action(() => SaveData()))">Save Game</button></p>
        @if (Program.playfabManager.IsConnected)
        {
            <p><button class="btn btn-primary" disabled onclick="@(new Action(() => SaveToCloud()))">Save Game To Cloud</button></p>
        }
    }

    <br />
    <br />
    @if (userWantsGameReset)
    {
        <p><button class="btn btn-primary" onclick="@(new Action(() => ResetGame()))">Are you sure?</button></p>
    }
    else
    {
        <p><button class="btn btn-primary" onclick="@(new Action(() => AskForReset()))">Reset Game</button></p>
    }
}
else
{
    <p>More Loading...</p>
    <p>If you see this for more than a few seconds, you might have to enable third party cookies in your browser settings.</p>
}

@functions{
    private bool safeToLoadGame = false;
    private bool saveGameExists = false;
    private bool loadBegun = false;
    private bool userWantsGameReset = false;
    private bool gameHasBeenSaved = false;
    private bool gameIsRendered = false;
    private bool debugMode = true;
    public string pudding = "Not set.";
    public string encrypt = "This is a whole string, with many things to test! 1234, 50, 100";
    public string testString = "";
    private int itemID;
    private int amount;
    private string skill;
    private int skillLevel;
    private ElementReference simpleList;
    private SimpleAES Encryptor = new SimpleAES();

    public void GetItem()
    {
        GameState.GetPlayerBank().GetInventory().AddMultipleOfItem(Program.itemDatabase.GetItemByID(itemID), amount);
    }
    private async void UpdateHighScores()
    {
        if (Program.playfabManager.IsConnected == false && (GameState.userID == null || GameState.userID == ""))
        {
            await ConnectToKongregate();
        }
        else
        {
            await JSRuntime.InvokeAsync<object>("kongregateFunctions.updateTotalLevelScore", GameState.GetPlayer().GetTotalLevel());
            await JSRuntime.InvokeAsync<object>("kongregateFunctions.updateTotalKills", GameState.totalKills);
        }


    }
    public void GoToDebugArea()
    {
        Program.areaManager.GetAreaByID(68).IsUnlocked = true;
    }
    public async void LoadDataFromCloud()
    {
        string data = await Program.playfabManager.LoadData();
        data = Encryptor.EncryptToString(data);
        LoadDataFromString(data);
    }
    public void DebugUnlockAllFollowers()
    {
        foreach (Follower f in Program.followerManager.GetFollowers())
        {
            f.IsUnlocked = true;
        }
    }
    public void DebugUnlockAllAreas()
    {
        Program.areaManager.UnlockAllAreas();
        StateHasChanged();
        GameState.UpdateState();
    }
    public void DebugGainStrengthLevel()
    {
        GameState.GetPlayer().GainExperience("Strength", Extensions.GetExperienceRequired(GameState.GetPlayer().GetLevel("Strength")) - GameState.GetPlayer().GetSkill("Strength").Experience);
        GameState.UpdateState();
        StateHasChanged();
    }
    public void DebugSetLevel(string skill, int level)
    {
        GameState.GetPlayer().GetSkill(skill).SetSkillLevel(level);
    }
    public void DebugOneOfEveryItem()
    {

        GameState.GetPlayerBank().GetInventory().AddOneOfMultipleItemsUnlimited(Program.itemDatabase.GetAllItems());

    }
    public void DebugAll99s()
    {
        foreach (Skill s in GameState.GetPlayer().GetSkills())
        {
            GameState.GetPlayer().GainExperience(s.Name, 15000000);
        }
    }
    public void DebugGetMoney()
    {
        GameState.GetPlayerBank().GetInventory().AddMultipleOfItemUnlimited(Program.itemDatabase.GetGold(), 100000);
    }
    private void AskForReset()
    {
        userWantsGameReset = true;
    }
    private void ResetGame()
    {
        MessageManager.AddMessage("Save Game Reset. Please reload the page to avoid errors.");
        localStorage.Clear();
        StateHasChanged();
    }
    private void SaveDataEncrypted()
    {
        localStorage.SetItem("SaveGameExists", true);
        localStorage.SetItem("eSave", Program.saveManager.GetSaveStringEncrypted(true));
        UpdateHighScores();
    }
    private string LoadDataEncrypted()
    {

        LoadDataFromString(localStorage.GetItem<string>("eSave"));
        GameState.UpdateState();
        this.StateHasChanged();
        return "";
    }
    private void SaveData()
    {
        while (!GameState.safeToSave)
        {
            Thread.Sleep(5);
        }

        SaveDataEncrypted();

        MessageManager.AddMessage("Your game has been saved.");
        gameHasBeenSaved = true;
        GameState.saveDataLoaded = true;
        GameState.saveGameExists = true;
        GC.Collect();
    }
    public void SaveToCloud()
    {
        if (Program.playfabManager.IsConnected == false && (GameState.userID == null || GameState.userID == ""))
        {
            ConnectToKongregate();
        }
        else if (Program.playfabManager.IsConnected)
        {
            Program.playfabManager.Save(Program.saveManager.GetSaveStringEncrypted(false));
        }
    }
    private void LoadDataFromString(string data)
    {
        Program.saveManager.LoadDataFromString(data);
        GameState.UpdateState();
        this.StateHasChanged();
    }
    private void LoadData()
    {
        LoadDataEncrypted();

        GameState.saveDataLoaded = true;
        Program.saveManager.StartAutosaving();

        GameState.UpdateState();
        this.StateHasChanged();
    }

    private async Task ConnectToCloudAndSave()
    {
        await ConnectToKongregate();
        await Program.playfabManager.TryLogin(GameState.userID, GameState.token);
        Program.playfabManager.Save(Program.saveManager.GetSaveStringEncrypted(false));
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
        GameState.UpdateState();
        this.StateHasChanged();
    }
    protected async override Task OnInitializedAsync()
    {
        saveGameExists = await asyncLocalStorage.GetItemAsync<bool>("SaveGameExists");
        GameState.JSRuntime = JSRuntime;
        await ConnectToKongregate();
        GameState.saveGameExists = saveGameExists;

        if (GameState.gameDataLoaded == false)
        {
            Program.gatherManager.SetGameState(GameState);
            Program.huntingManager.SetGameState(GameState);

            await GameState.LoadPlayerData(Http);
            await Program.itemDatabase.LoadItems(Http);
            await Program.areaManager.LoadAreas(Http);
            await Program.buildingManager.LoadBuildings(Http);
            await Program.followerManager.LoadFollowers(Http);
            await Program.npcManager.LoadNPCs(Http);
            await Program.battleManager.LoadMonsters(Http, GameState, MessageManager, Program.itemDatabase, JSRuntime);
            await Program.houseManager.LoadFurnitureAndSlots(Http);
            await Program.petManager.LoadPets(Http);
            Program.saveManager.JSRuntime = JSRuntime;
            Program.saveManager.localStorage = localStorage;
            Program.saveManager.gameState = GameState;
            Program.saveManager.messageManager = MessageManager;
            Program.houseManager.gameState = GameState;
            Program.houseManager.messageManager = MessageManager;
            Program.houseManager.itemDatabase = Program.itemDatabase;
            GameState.GetPlayer().SetMessageManager(MessageManager);
            GameState.GetPlayer().CurrentHP = 50;
            GameState.GetPlayerBank().AddItemsToCurrentTab(Program.itemDatabase.GetAllItemIDs());
            GameState.GetPlayerBank().GetInventory().isBank = true;
            GameState.LoadMonsters(Program.battleManager.GetAllMonsters());
            GameState.petManager = Program.petManager;
            GameState.gameDataLoaded = true;
            GameState.safeToLoad = true;
        }
        else
        {
            GameState.safeToLoad = true;
        }
        if (saveGameExists == false)
        {
            Program.saveManager.StartAutosaving();
        }
        try
        {
            await Program.playfabManager.TryLogin(GameState.userID, GameState.token);
            GameState.UpdateState();
            this.StateHasChanged();
        }
        catch
        {
            Console.WriteLine("Couldn't connect to Playfab.");
        }

        GameState.UpdateState();
        this.StateHasChanged();
    }
    private async Task ConnectToKongregate()
    {
        try
        {
            GameState.userID = await JSRuntime.InvokeAsync<string>("kongregateFunctions.getUserID");
            GameState.token = await JSRuntime.InvokeAsync<string>("kongregateFunctions.getToken");
        }
        catch
        {

            GameState.userID = "";
            GameState.token = "";

        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        safeToLoadGame = true;
    }
    void IDisposable.Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
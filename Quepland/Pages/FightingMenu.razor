@page "/FightingMenu/{thisArea}"
@inject GameState  GameState
@inject MessageManager  MessageManager
@inject IJSRuntime JSRuntime
@using System.Threading;
@inject Microsoft.AspNetCore.Blazor.Services.WebAssemblyUriHelper UriHelper

@if (area != null)
{
    <p>You are seeking enemies to fight in @area.Name</p>
    <br />
    @LoadBattleMenu()
    @if (BM.battleFound)
    {
        @LoadBattle()
    }

}

@functions{

    [Parameter]
    private string thisArea { get; set; }
    private Area area;
    Random rand = new Random();
    private bool battleFound;
    private bool battleStarted;
    private Monster opponent;
    private BattleManager BM = Program.battleManager;


    private bool autoFight;
    private Monster autoBattleMonster;
    private List<Monster> possibleMonsters = new List<Monster>();
    private string areaURL;
    private string winString = "";

    private RenderFragment LoadBattleMenu()
    {
        return builder =>
        {
            builder.OpenElement(0, "button");
            builder.AddAttribute(0, "class", "btn btn-primary");
            builder.AddAttribute(0, "style", "margin-bottom:10px");
            builder.AddAttribute(0, "onclick", new Action(() => BM.FindBattle()));
            if (BM.battleStarted || BM.autoFight)
            {
                builder.AddAttribute(0, "disabled", true);
                builder.AddAttribute(0, "title", "You can't do this while battling!");
            }
            else if (BM.autoBattleOpponent != null)
            {
                builder.AddAttribute(0, "disabled", true);
                builder.AddAttribute(0, "title", "You can't do this with an auto battle opponent selected.");
            }
            else if (BM.autoFight)
            {
                builder.AddAttribute(0, "disabled", true);
                builder.AddAttribute(0, "title", "You must stop auto battling to manually battle.");
            }
            builder.AddContent(0, "Find Battle");
            builder.CloseElement();

            builder.OpenElement(0, "br");
            builder.CloseElement();

            builder.AddContent(0, LoadOpponentList());


            builder.OpenElement(0, "button");
            builder.AddAttribute(0, "class", "btn btn-primary");
            builder.AddAttribute(0, "style", "margin-bottom:10px");
            builder.AddAttribute(0, "onclick", new Action(() => BM.StartAutoFighting()));
        //If there is a battle, the player has no follower, or the player's follower is not a fighter, or is already auto fighting.
        if ((BM.battleFound && BM.autoFight == false) ||
                BM.battleStarted ||
                (GameState.GetPlayer().activeFollower == null) ||
                (GameState.GetPlayer().activeFollower != null && GameState.GetPlayer().activeFollower.AutoCollectSkill != "Fighting") ||
                BM.autoFight)
            {
                builder.AddAttribute(0, "disabled", true);
                builder.AddAttribute(0, "title", "You'll need a follower who can help you find enemies to do this.");
            }
            builder.AddContent(0, "Auto Battle");
            builder.CloseElement();
            if (BM.autoFight)
            {
                builder.OpenElement(0, "br");
                builder.CloseElement();

                builder.OpenElement(0, "button");
                builder.AddAttribute(0, "class", "btn btn-primary");
                builder.AddAttribute(0, "style", "margin-bottom:10px");
                builder.AddAttribute(0, "onclick", new Action(() => BM.StopAutoBattling()));
                builder.AddContent(0, "Stop Battling");
                builder.CloseElement();
            }
        };
    }
    private RenderFragment LoadOpponentList()
    {
        return builder =>
        {
            if (GameState.GetPlayer().activeFollower != null &&
                GameState.GetPlayer().activeFollower.AutoCollectSkill == "Fighting" &&
                GameState.GetPlayer().activeFollower.AutoCollectLevel > 0)
            {
                builder.OpenElement(0, "p");

                builder.OpenElement(1, "div");
                builder.AddAttribute(2, "class", "dropdown");
                builder.AddAttribute(2, "style", "margin-bottom:10px");
                builder.OpenElement(3, "button");

                builder.AddAttribute(4, "class", "btn btn-primary dropdown-toggle");
                builder.AddAttribute(5, "type", "button");
                builder.AddAttribute(6, "id", "dropdownMenuButton");
                builder.AddAttribute(7, "data-toggle", "dropdown");
                builder.AddAttribute(8, "aria-haspopup", "true");
                builder.AddAttribute(9, "aria-expanded", "false");

                if (BM.autoBattleOpponent == null)
                {
                    builder.AddContent(10, "Select an opponent to fight");
                }
                else
                {
                    builder.AddContent(10, BM.autoBattleOpponent.Name);
                }
                builder.CloseElement();

                builder.OpenElement(12, "div");
                builder.AddAttribute(13, "class", "dropdown-menu");
                builder.AddAttribute(14, "aria-labelledby", "dropdownMenuButton");

                builder.OpenElement(15, "a");
                builder.AddAttribute(16, "class", "dropdown-item");
                builder.AddAttribute(17, "onclick", new Action(() => SetOpponent(null)));
                builder.AddContent(18, "Deselect");
                builder.CloseElement();
                foreach (int i in area.MonsterIDs)
                {
                    Monster monster = Program.battleManager.GetMonsterByID(i);
                    builder.OpenElement(15, "a");
                    builder.AddAttribute(16, "class", "dropdown-item");
                    builder.AddAttribute(17, "onclick", new Action(() => SetOpponent(monster)));
                    builder.AddContent(18, monster.Name);
                    builder.CloseElement();

                }

                builder.CloseElement();
                builder.CloseElement();
                builder.CloseElement();
            }

        };
    }
    private RenderFragment LoadBattle()
    {
        return builder =>
        {
            builder.OpenElement(0, "p");
            builder.OpenElement(1, "span");
            builder.AddAttribute(1, "style", "float:left");
            builder.AddContent(1, BM.opponent.Name);
            builder.CloseElement();
            builder.OpenElement(1, "span");
            builder.AddAttribute(1, "style", "float:right");
            builder.AddContent(1, "You");
            builder.CloseElement();
            builder.CloseElement();

            builder.OpenElement(0, "br");
            builder.CloseElement();

            builder.OpenElement(0, "p");
            builder.OpenElement(1, "span");
            builder.AddAttribute(1, "style", "float:left");
            builder.AddContent(1, BM.opponent.CurrentHP + "/" + BM.opponent.HP);
            builder.CloseElement();

            builder.OpenElement(1, "span");
            builder.AddAttribute(1, "style", "float:right");
            builder.AddContent(1, GameState.GetPlayer().CurrentHP + "/" + GameState.GetPlayer().MaxHP);
            builder.CloseElement();
            builder.CloseElement();

            builder.OpenElement(0, "br");
            builder.CloseElement();

            builder.AddContent(0, LoadHPBars());

            builder.OpenElement(0, "br");
            builder.CloseElement();

            builder.OpenElement(0, "button");
            builder.AddAttribute(0, "class", "btn btn-primary");
            builder.AddAttribute(0, "style", "margin-bottom:10px");
            builder.AddAttribute(0, "onclick", new Action(() => BM.StartBattle()));
            if (BM.battleStarted == true)
            {
                builder.AddAttribute(0, "disabled", true);
                builder.AddAttribute(0, "title", "You can't do this while battling.");
            }
            builder.AddContent(0, "Start Battle");
            builder.CloseElement();

        };
    }
    private RenderFragment LoadHPBars()
    {
        return builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "progress");

            builder.OpenElement(2, "div");
            builder.AddAttribute(3, "class", "progress-bar bg-success");
            builder.AddAttribute(4, "style", "width:" + ((float)BM.opponent.CurrentHP / BM.opponent.HP) * 100 + "%");
            builder.AddAttribute(5, "role", "progressbar");
            builder.AddAttribute(6, "aria-valuenow", "" + ((float)BM.opponent.CurrentHP / BM.opponent.HP) * 100);
            builder.AddAttribute(7, "aria-valuemin", "0");
            builder.AddAttribute(8, "aria-valuemax", "" + BM.opponent.HP);
            builder.CloseElement();
            builder.CloseElement();
        };
    }
    private void SetOpponent(Monster monster)
    {
        BM.autoBattleOpponent = monster;
        GameState.UpdateState();
    }
    protected override void OnParametersSet()
    {
        SetArea(thisArea);
    }
    private void SetArea(string areaString)
    {
        area = Program.areaManager.GetAreaByURL(areaString);
        GameState.currentArea = area;
        Program.battleManager.isDojoBattle = false;
        Program.battleManager.autoBattleOpponent = null;
        possibleMonsters = Program.battleManager.GetMonstersForArea(area);
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
        GameState.canSell = false;
        this.StateHasChanged();
        GameState.UpdateState();
    }
    public void Dispose()
    {
        autoFight = false;
        BM.EndTimers();
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
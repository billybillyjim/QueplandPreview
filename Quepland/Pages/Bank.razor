@page "/Bank"
@inject HttpClient Http
@inject GameState GameState
@inject MessageManager MessageManager
@inject Microsoft.AspNetCore.Blazor.Services.WebAssemblyUriHelper UriHelper
@inject IJSRuntime JSRuntime

@implements IDisposable

<h1>Hello, this is your bank!</h1>
<p><button class="btn btn-primary" onclick="@(new Action(() => DepositAll()))">Deposit All</button></p>


<p>
    <EditForm Model="@withdrawAmountModel" OnValidSubmit="@SetWithdrawAmount">
        <DataAnnotationsValidator />
        <ValidationSummary />

        Withdraw X:<InputNumber id="withdrawamount" @bind-Value="@withdrawAmountModel.withdrawAmount" />

    </EditForm>
</p>
<p>
    Search:<input type="text" @bind-value="@searchString" @bind-value:event="oninput" />
</p>
<div class="dropdown">
    <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Sort By
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        <a class="dropdown-item" onclick="@(new Action(()=>SetSortStyle(0)))">Name</a>
        <a class="dropdown-item" onclick="@(new Action(()=>SetSortStyle(1)))">Amount</a>
        <a class="dropdown-item" onclick="@(new Action(()=>SetSortStyle(2)))">Action Group</a>
        <a class="dropdown-item" onclick="@(new Action(()=>SetSortStyle(3)))">Damage</a>
        <a class="dropdown-item" onclick="@(new Action(()=>SetSortStyle(4)))">Value</a>
    </div>
</div>
<br />
@if (addingItemsToTab)
{
    <button class="btn btn-primary" style="margin:10px" onclick="@(new Action(() => ToggleAddingItemsToTab()))">Stop</button>

    <input type="text" @bind-value="@newTabName" @bind-value:event="onchange" />
    <button class="btn btn-primary" style="margin:10px" onclick="@(new Action(() => ChangeTabName(newTabName)))">Change Name</button>
    <button class="btn btn-primary" style="margin:10px" onclick="@(new Action(() => DeleteTab()))">Delete Tab</button>
}
else if (GameState.GetPlayerBank().activeTab != GameState.GetPlayerBank().tabs[0])
{
    <button class="btn btn-primary" style="margin:10px" onclick="@(new Action(() => ToggleAddingItemsToTab()))">Modify Tab</button>

}

<br />
<ul class="nav nav-pills">

    @foreach (BankTab tab in GameState.GetPlayerBank().tabs)
    {
        <li class="nav-item" style="padding:2px;margin:5px">
            @if (GameState.GetPlayerBank().activeTab.Name == tab.Name)
            {
                <a class="btn btn-outline-primary">@tab.Name</a>
            }
            else
            {
                <a class="btn btn-primary" onclick="@(new Action(() => SetActiveTab(tab.Name)))">@tab.Name</a>
            }
        </li>

    }
    @if (creatingNewTab == false)
    {
        <li class="nav-item" style="padding:2px;margin:5px">
            <a class="btn btn-primary" @onclick="@(new Action(() => BeginCreatingNewTab()))">New</a>
        </li>
    }
    else
    {
        <li class="nav-item" style="padding:2px;margin:5px">
            <input type="text" @bind-value="@newTabName" @bind-value:event="onchange" />
            <button class="btn btn-primary" onclick="@(new Action(() => CreateNewTab(newTabName)))">Create</button>
        </li>
    }

</ul>
<div class="bank-table">
    <table style="width:100%">
        <thead>
            <tr style="padding:.2rem">
                <th align="left">Item</th>
                @if (!GameState.compactBankView)
                {
                    <th>Description</th>
                }
                <th style="text-align:right">Amount</th>
            </tr>
        </thead>
        <tbody>
            @if (GameState.GetPlayerBank() != null && GameState.isGathering == false)
            {

                @foreach (KeyValuePair<GameItem, int> item in GameState.GetPlayerBank().GetInventory().GetItemsSorted(sortStyle))
                {
                    //If the search string is null or empty, or the search string contains characters in the item's name.
                    @if ((((searchString == null || searchString == "") || item.Key.ItemName.ToLower().Contains(searchString.ToLower())) &&
               //If the tab is set to all and the tab contains that item id
               ((GameState.GetPlayerBank().activeTab.Name == "All" || GameState.GetPlayerBank().activeTab.itemIDs.Contains(item.Key.Id)) || addingItemsToTab)))
                    //If the player is adding items to the tab, all items are visible.

                    {
                        <tr class="buddy-top" style="padding:.2rem">
                            <td style="font-weight:bold; padding:.2rem"><img src="data/ItemIcons/@(item.Key.Icon + ".png")" style="width:40px;opacity:0.6" />@item.Key.ItemName</td>
                            @if (!GameState.compactBankView && !addingItemsToTab)
                            {
                                <td style="padding:.2rem">@item.Key.ItemDescription</td>
                            }
                            @if (!addingItemsToTab)
                            {
                                <td style="padding:.2rem" align="right" title="Worth @(((item.Key.Value / 2f) * item.Value) + " (" + (item.Key.Value / 2f)) each)">@String.Format("{0:n0}", item.Value)</td>
                            }

                            @if (GameState.compactBankView && !addingItemsToTab)
                            {
                                <td style="padding:.2rem; min-width:220px" align="right">
                                    <button class="btn btn-primary" onclick="@(new Action(() => Withdraw(item.Key, 1)))">1</button>
                                    <button class="btn btn-primary" onclick="@(new Action(() => Withdraw(item.Key, 5)))">5</button>
                                    <button class="btn btn-primary" onclick="@(new Action(() => Withdraw(item.Key, withdrawAmountModel.withdrawAmount)))">@withdrawAmount</button>
                                    <button class="btn btn-primary" onclick="@(new Action(() => Withdraw(item.Key, int.MaxValue)))">All</button>
                                </td>
                            }
                            @if (addingItemsToTab)
                            {
                                @if (!GameState.GetPlayerBank().activeTab.itemIDs.Contains(item.Key.Id))
                                {
                                    <td></td>
                                    <td></td>
                                    <td>
                                        <button class="btn btn-success" onclick="@(new Action(() => AddItemToTab(item.Key.Id)))">Add</button>
                                    </td>
                                }
                                else
                                {
                                    <td></td>
                                    <td></td>
                                    <td>
                                        <button class="btn btn-success" onclick="@(new Action(() => RemoveItemFromTab(item.Key.Id)))">Remove</button>
                                    </td>
                                }
                            }
                        </tr>

                        @if (item.Key.IsEquipable && !GameState.compactBankView && !addingItemsToTab)
                        {
                            <tr style="padding:.2rem" title="DPS:@((float)item.Key.Damage / (item.Key.AttackSpeed / 1000f))">
                                <td style="padding:.2rem" colspan="3">
                                    Gather Speed Bonus:@(item.Key.GatherSpeedBonus), Damage:@(item.Key.Damage), Attack Speed:@(item.Key.AttackSpeed / 1000f) @if (item.Key.Armor > 0)
                                    {<div>Armor:@(item.Key.Armor)</div>}
                                </td>
                            </tr>
                        }
                        @if (item.Key.IsArrow && !GameState.compactBankView && !addingItemsToTab)
                        {
                            <tr style="padding:.2rem">
                                <td style="padding:.2rem">Damage:@item.Key.Damage</td>
                            </tr>
                        }
                        @if (!GameState.compactBankView && !addingItemsToTab)
                        {
                            <tr class="buddy-mid" style="padding:.2rem">
                                <td style="padding:.2rem" align="left">Withdraw </td>
                                <td style="padding:.2rem" align="left"></td>
                                <td style="padding:.2rem;min-width:220px" align="right">
                                    <button class="btn btn-primary" onclick="@(new Action(() => Withdraw(item.Key, 1)))">1</button>
                                    <button class="btn btn-primary" onclick="@(new Action(() => Withdraw(item.Key, 5)))">5</button>
                                    <button class="btn btn-primary" onclick="@(new Action(() => Withdraw(item.Key, withdrawAmountModel.withdrawAmount)))">@withdrawAmount</button>
                                    <button class="btn btn-primary" onclick="@(new Action(() => Withdraw(item.Key, int.MaxValue)))">All</button>
                                </td>
                            </tr>
                        }
                        @if (GameState.GetPlayer().activeFollower != null && GameState.GetPlayer().activeFollower.AutoCollectSkill == "Banking" && item.Key.Id != 0 && !addingItemsToTab)
                        {
                            <tr class="buddy-mid" style="padding:.2rem">
                                <td>Have follower sell:</td>
                                <td>
                                    <button class="btn btn-success" onclick="@(new Action(() => Sell(item, 1)))">1</button>
                                    <button class="btn btn-success" onclick="@(new Action(() => Sell(item, 5)))">5</button>
                                    <button class="btn btn-success" onclick="@(new Action(() => Sell(item, withdrawAmountModel.withdrawAmount)))">@withdrawAmount</button>
                                    <button class="btn btn-success" onclick="@(new Action(() => Sell(item, int.MaxValue)))">All</button>
                                </td>
                            </tr>
                        }

                    }

                }

            }


        </tbody>
    </table>
</div>


@functions{

    public int sortStyle = 0;
    public int withdrawAmount = 1;
    private bool creatingNewTab = false;
    private bool addingItemsToTab = false;
    private bool changingNewTabName = false;
    public string searchString = "";
    public string newTabName = "";
    private WithdrawAmountModel withdrawAmountModel = new WithdrawAmountModel();

    private void DeleteTab()
    {
        if (GameState.GetPlayerBank().activeTab.Name != "All")
        {
            GameState.GetPlayerBank().tabs.Remove(GameState.GetPlayerBank().activeTab);
        }
        GameState.GetPlayerBank().SetActiveTab("All");
        addingItemsToTab = false;
        GameState.UpdateState();
    }
    private void ChangeTabName(string newName)
    {
        if (GameState.GetPlayerBank().activeTab.Name != "All" && GameState.GetPlayerBank().NameIsValid(newName))
        {
            GameState.GetPlayerBank().activeTab.Name = newName;
        }
        else
        {
            MessageManager.AddMessage("You already have a tab with that name.");
        }
        changingNewTabName = false;
        GameState.UpdateState();
    }
    private void ToggleAddingItemsToTab()
    {
        addingItemsToTab = !addingItemsToTab;
        GameState.UpdateState();
    }
    private void AddItemToTab(int id)
    {
        GameState.GetPlayerBank().activeTab.itemIDs.Add(id);
        GameState.UpdateState();
    }
    private void RemoveItemFromTab(int id)
    {
        GameState.GetPlayerBank().activeTab.itemIDs.Remove(id);
        GameState.UpdateState();
    }
    private void BeginCreatingNewTab()
    {
        creatingNewTab = true;       
        GameState.UpdateState();
    }
    private void CreateNewTab(string newName)
    {
        if (GameState.GetPlayerBank().NameIsValid(newName))
        {
            GameState.GetPlayerBank().tabs.Add(new BankTab(newName));
        }
        else
        {
            MessageManager.AddMessage("You already have a tab with that name.");
        }

        creatingNewTab = false;
        GameState.UpdateState();
    }
    private void SetActiveTab(string tabName)
    {
        GameState.GetPlayerBank().SetActiveTab(tabName);
        GameState.UpdateState();
        //Currently the only way to stop switching tabs from constantly increasing memory usage. Check if necessary on Blazor 3.1
        GC.Collect();
        
    }
    private void SetWithdrawAmount()
    {
        withdrawAmount = withdrawAmountModel.withdrawAmount;
        GameState.bankWithdrawAmount = withdrawAmount;
        GameState.UpdateState();
    }
    public void SetSortStyle(int newVal)
    {
        sortStyle = newVal;
        GameState.bankSortStyle = newVal;
    }
    private string DepositAll()
    {
        GameState.safeToSave = false;
        GameState.GetPlayerBank().GetInventory().AddItems(GameState.GetPlayerInventory().GetUnequippedItems());
        GameState.GetPlayerInventory().EmptyInventoryOfUnequippedItems();
        GameState.safeToSave = true;
        GameState.UpdateState();

        StateHasChanged();
        return "";
    }
    private string Withdraw(GameItem item, int amount)
    {
        GameState.safeToSave = false;
        if (amount < 0)
        {
            amount = 0;
            withdrawAmount = 0;
        }
        int maxWithdraw;
        //If the item is stackable and the player has a stack in their inventory already, or the player has space for another item
        if ((item.IsStackable && GameState.GetPlayerInventory().HasItem(item) && GameState.GetPlayerInventory().GetAvailableSpaces() == 0) ||
             item.IsStackable && GameState.GetPlayerInventory().GetAvailableSpaces() > 0)
        {
            maxWithdraw = Math.Min(amount, GameState.GetPlayerBank().GetInventory().GetNumberOfItem(item));
        }
        else
        {
            //Gets the smallest of the amount, inventory space, and number in the bank.
            maxWithdraw = Math.Min(Math.Min(amount, GameState.GetPlayerInventory().GetAvailableSpaces()), GameState.GetPlayerBank().GetInventory().GetAmountOfItem(item));
        }
        if (GameState.GetPlayerInventory().AddMultipleOfItem(item, maxWithdraw))
        {
            GameState.GetPlayerBank().GetInventory().RemoveItems(item, maxWithdraw);
        }

        GameState.safeToSave = true;
        GameState.UpdateState();
        return "";
    }
    private string Sell(KeyValuePair<GameItem, int> item, int amount)
    {
        GameState.safeToSave = false;
        if (amount > item.Value)
        {
            amount = item.Value;
        }
        if (amount < 0)
        {
            return "";
        }
        GameState.GetPlayerBank().GetInventory().RemoveItems(item.Key, amount);
        GameState.GetPlayerBank().GetInventory().AddMultipleOfItem(Program.itemDatabase.GetGold(), (int)((item.Key.Value * amount) / 2d));
        GameState.totalCoinsEarned += (int)((item.Key.Value * amount) / 2d);
        GameState.safeToSave = true;
        GameState.UpdateState();
        return "";
    }
    protected override void OnInitialized()
    {

        GameState.StateChanged += OnGameStateChanged;
        sortStyle = GameState.bankSortStyle;
        GameState.canBank = true;
        GameState.canSell = false;
        GameState.activeView = "Inventory";
        withdrawAmount = GameState.bankWithdrawAmount;
        //Give the player an axe if they have no items.
        if (GameState.GetPlayerBank().GetInventory().GetTotalNumberOfItems() == 0 && GameState.GetPlayerInventory().GetTotalNumberOfItems() == 0)
        {
            GameState.GetPlayerBank().GetInventory().AddItem(Program.itemDatabase.GetItemByID(12));
            MessageManager.AddMessage("You find a stone axe in your bank account.");
        }
        GameState.UpdateState();

        this.StateHasChanged();

    }

    void IDisposable.Dispose()
    {
        GameState.canBank = false;
        GameState.UpdateState();
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
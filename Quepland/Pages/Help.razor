@page "/Help"
@inject HttpClient Http
@inject GameState GameState
@inject Microsoft.AspNetCore.Blazor.Services.WebAssemblyUriHelper UriHelper
@implements IDisposable

<p>Welcome to the world of Quepland! You probably have many questions. Hopefully some of the info here will answer anything you'd like to know.</p>

<p><a href="https://docs.google.com/spreadsheets/d/1yoEcNe82BvJWLywg9RLLYdjxYCOpLHzY0DDh37dKCTA/edit#gid=1503717891" target="_blank">Game Resource Guide</a></p>

<p><b>What do I do?</b></p>
<p>You can do whatever you'd like! As you continue on your journey you'll find various roadblocks in your way. Mouse over them and they'll tell you what item or stat you need to pass through them.</p>

<p><b>How do I Craft?</b></p>
<p>Crafting can be done by using tools on materials. There are a number of items you can craft, but to start out, you'll want something like the Wood Carving Knife, and some logs in your inventory. Witht the right items, the possible options will automatically appear in the crafting menu.</p>

<p><b>What does x skill do?</b></p>
<p>Every skill in the game is explained in its own skill screen, which can be accessed by clicking on the skill in the skill menu to the right.</p>

<p><b>How do I find x?</b></p>
<p>There's an incredible Google Sheets resource for finding almost anything in the game located at the link above. Alternatively, the game's chatrooms are usually quite active and players are always happy to help. If I notice certain things are difficult to find for a lot of players I will try my best to make it more clear in game. </p>

<p><b>I found a bug!</b></p>
<p>If you ever find a bug and want to let me know, just send me a message on Kongregate or Reddit. Be sure to include the version number you're playing on (like 1.017b) as it helps me figure out if it's something I've already fixed.</p>



@functions{

    private void Return()
    {
        UriHelper.NavigateTo("/Bank/");
    }

    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
        this.StateHasChanged();
    }
    void IDisposable.Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
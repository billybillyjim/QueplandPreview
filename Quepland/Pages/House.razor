@page "/House"
@using System.Threading;
@inject HttpClient Http
@inject GameState GameState
@inject MessageManager  MessageManager
@inject NavigationManager UriHelper
@implements IDisposable

<h1>Welcome Home</h1>

@LoadBuildDropdown()
@foreach(FurnitureSlot slot in Program.houseManager.emptySlots)
{
    <FurnitureSlotComponent furnitureSlot="@slot"></FurnitureSlotComponent>
}



@functions{


    private bool useLowestPlank;
    private bool useLowestBar;
    private GameItem currentPlank;
    private GameItem currentBar;
    private GameItem currentOtherItem;
    private static Random rand = new Random();

    private RenderFragment LoadBuildDropdown()
    {
        return builder =>
        {
            builder.OpenElement(0, "p");

            builder.OpenElement(1, "div");
            builder.AddAttribute(2, "class", "dropdown");
            builder.AddAttribute(2, "style", "margin-bottom:10px");
            builder.OpenElement(3, "button");

            builder.AddAttribute(4, "class", "btn btn-primary dropdown-toggle");
            builder.AddAttribute(5, "type", "button");
            builder.AddAttribute(6, "id", "dropdownMenuButton");
            builder.AddAttribute(7, "data-toggle", "dropdown");
            builder.AddAttribute(8, "aria-haspopup", "true");
            builder.AddAttribute(9, "aria-expanded", "false");
            if (GameState.isGathering)
            {
                builder.AddAttribute(10, "disabled", true);
            }

            builder.AddContent(11, "Plan a new furniture slot");

            builder.CloseElement();

            builder.OpenElement(12, "div");
            builder.AddAttribute(13, "class", "dropdown-menu");
            builder.AddAttribute(14, "aria-labelledby", "dropdownMenuButton");


            foreach (FurnitureSlot slot in Program.houseManager.furnitureSlots)
            {
                if (GetSlotMinimumLevel(slot) <= GameState.GetPlayer().GetLevel("Construction"))
                {

                    builder.OpenElement(15, "a");
                    builder.AddAttribute(16, "class", "dropdown-item");
                    builder.AddAttribute(17, "onclick", new Action(() => AddSlot(slot)));
                    builder.AddContent(18, slot.Name);
                    builder.CloseElement();
                }

            }
            builder.CloseElement();
            builder.CloseElement();
            builder.CloseElement();
        };
    }



    private void AddSlot(FurnitureSlot slot)
    {
        if(slot.SpaceRequired + Program.houseManager.GetSpaceUsed() <= GameState.GetPlayer().house.availableSpace)
        {
            FurnitureSlot newSlot = new FurnitureSlot(slot);
            Program.houseManager.emptySlots.Add(newSlot);
            MessageManager.AddMessage("Space Used:" + slot.SpaceRequired + ", Total:" + Program.houseManager.GetSpaceUsed() + ", Available:" + GameState.GetPlayer().house.availableSpace);
        }
        else
        {
            MessageManager.AddMessage("You don't have enough space in your house for that. You'll need to increase the size of your house.");
        }
        GameState.UpdateState();
    }
    private int GetSlotMinimumLevel(FurnitureSlot slot)
    {
        return Program.houseManager.GetAvailableFurnitureForSlot(slot)[0].LevelRequired;
    }

    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
        this.StateHasChanged();
    }
    void IDisposable.Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
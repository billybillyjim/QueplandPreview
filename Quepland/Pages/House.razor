@page "/House"
@using System.Threading;
@inject HttpClient Http
@inject GameState GameState
@inject MessageManager  MessageManager
@inject Microsoft.AspNetCore.Blazor.Services.WebAssemblyUriHelper UriHelper
@implements IDisposable

<h1>Welcome Home</h1>

@LoadBuildDropdown()
@foreach(FurnitureSlot slot in Program.houseManager.emptySlots)
{
    @LoadFurnitureSlot(slot)
}



@functions{


    private bool useLowestPlank;
    private bool useLowestBar;
    private GameItem currentPlank;
    private GameItem currentBar;
    private GameItem currentOtherItem;
    private static Random rand = new Random();

    private RenderFragment LoadBuildDropdown()
    {
        return builder =>
        {
            builder.OpenElement(0, "p");

            builder.OpenElement(1, "div");
            builder.AddAttribute(2, "class", "dropdown");
            builder.AddAttribute(2, "style", "margin-bottom:10px");
            builder.OpenElement(3, "button");

            builder.AddAttribute(4, "class", "btn btn-primary dropdown-toggle");
            builder.AddAttribute(5, "type", "button");
            builder.AddAttribute(6, "id", "dropdownMenuButton");
            builder.AddAttribute(7, "data-toggle", "dropdown");
            builder.AddAttribute(8, "aria-haspopup", "true");
            builder.AddAttribute(9, "aria-expanded", "false");
            if (GameState.isGathering)
            {
                builder.AddAttribute(10, "disabled", true);
            }

            builder.AddContent(11, "Plan a new furniture slot");

            builder.CloseElement();

            builder.OpenElement(12, "div");
            builder.AddAttribute(13, "class", "dropdown-menu");
            builder.AddAttribute(14, "aria-labelledby", "dropdownMenuButton");


            foreach (FurnitureSlot slot in Program.houseManager.furnitureSlots)
            {
                if (GetSlotMinimumLevel(slot) <= GameState.GetPlayer().GetLevel("Construction"))
                {

                    builder.OpenElement(15, "a");
                    builder.AddAttribute(16, "class", "dropdown-item");
                    builder.AddAttribute(17, "onclick", new Action(() => AddSlot(slot)));
                    builder.AddContent(18, slot.Name);
                    builder.CloseElement();
                }

            }
            builder.CloseElement();
            builder.CloseElement();
            builder.CloseElement();
        };
    }
    private RenderFragment ShowPlankDropdown()
    {
        return builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "dropdown");
            builder.AddAttribute(2, "style", "float:right;margin-right:3px");
            builder.OpenElement(3, "button");

            builder.AddAttribute(4, "class", "btn btn-primary dropdown-toggle");
            builder.AddAttribute(5, "type", "button");
            builder.AddAttribute(6, "id", "dropdownMenuButton");
            builder.AddAttribute(7, "data-toggle", "dropdown");
            builder.AddAttribute(8, "aria-haspopup", "true");
            builder.AddAttribute(9, "aria-expanded", "false");
            builder.AddAttribute(10, "style", "margin-top:-12px;padding:3px");
            builder.OpenElement(11, "img");

            builder.AddAttribute(12, "style", "height:40px;width:40px");
            builder.AddAttribute(13, "src", "data/ItemIcons/Plank.png");

            builder.AddContent(14, "Set Plank");

            builder.CloseElement();
            builder.CloseElement();

            builder.OpenElement(15, "div");
            builder.AddAttribute(16, "class", "dropdown-menu");
            builder.AddAttribute(17, "aria-labelledby", "dropdownMenuButton");
            if(currentPlank == null)
            {
                builder.OpenElement(18, "a");
                builder.AddAttribute(19, "class", "dropdown-item");
                builder.AddContent(20, "Select a Plank");
                builder.CloseElement();
            }
            else
            {
                builder.OpenElement(18, "a");
                builder.AddAttribute(19, "class", "dropdown-item");
                builder.AddAttribute(19, "title", "You have " + GameState.GetPlayerBank().GetInventory().GetAmountOfItem(currentPlank) + " in your bank.");
                builder.AddContent(20, currentPlank.ItemName);
                builder.CloseElement();
            }
            builder.OpenElement(21, "div");
            builder.AddAttribute(22, "class", "dropdown-divider");
            builder.CloseElement();
            builder.OpenElement(23, "a");
            builder.AddAttribute(24, "class", "dropdown-item");
            builder.AddAttribute(25, "onclick", new Action(() => ToggleUsePlankOption()));
            builder.AddContent(26, "Use Lowest Level");
            builder.CloseElement();

            foreach (GameItem plank in Program.itemDatabase.GetPlanks())
            {
                if (GameState.GetPlayerBank().GetInventory().HasItem(plank))
                {
                    builder.OpenElement(27, "a");
                    builder.AddAttribute(28, "class", "dropdown-item");
                    builder.AddAttribute(29, "title", "You have " + GameState.GetPlayerBank().GetInventory().GetAmountOfItem(plank) + " in your bank.");
                    builder.AddAttribute(30, "onclick", new Action(() => SetCurrentPlank(plank)));
                    builder.AddContent(31, plank.ItemName);
                    builder.CloseElement();
                }



            }
            builder.CloseElement();
            builder.CloseElement();
        };

    }
    private RenderFragment ShowBarDropdown()
    {
        return builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "dropdown");
            builder.AddAttribute(2, "style", "float:right;margin-right:3px");
            builder.OpenElement(3, "button");

            builder.AddAttribute(4, "class", "btn btn-primary dropdown-toggle");
            builder.AddAttribute(5, "type", "button");
            builder.AddAttribute(6, "id", "dropdownMenuButton");
            builder.AddAttribute(7, "data-toggle", "dropdown");
            builder.AddAttribute(8, "aria-haspopup", "true");
            builder.AddAttribute(9, "aria-expanded", "false");
            builder.AddAttribute(10, "style", "margin-top:-12px;padding:3px");
            builder.OpenElement(11, "img");

            builder.AddAttribute(12, "style", "height:40px;width:40px");
            builder.AddAttribute(13, "src", "data/ItemIcons/Bar.png");

            builder.AddContent(14, "Set Bar");

            builder.CloseElement();
            builder.CloseElement();

            builder.OpenElement(15, "div");
            builder.AddAttribute(16, "class", "dropdown-menu");
            builder.AddAttribute(17, "aria-labelledby", "dropdownMenuButton");
            if(currentBar == null)
            {
                builder.OpenElement(18, "a");
                builder.AddAttribute(19, "class", "dropdown-item");
                builder.AddContent(20, "Select a Bar");
                builder.CloseElement();
            }
            else
            {
                builder.OpenElement(18, "a");
                builder.AddAttribute(19, "class", "dropdown-item");
                builder.AddAttribute(19, "title", "You have " + GameState.GetPlayerBank().GetInventory().GetAmountOfItem(currentBar) + " in your bank.");
                builder.AddContent(20, currentBar.ItemName);
                builder.CloseElement();
            }
            builder.OpenElement(21, "div");
            builder.AddAttribute(22, "class", "dropdown-divider");
            builder.CloseElement();
            builder.OpenElement(23, "a");
            builder.AddAttribute(24, "class", "dropdown-item");
            builder.AddAttribute(25, "onclick", new Action(() => ToggleUseBarOption()));
            builder.AddContent(26, "Use Lowest Level");
            builder.CloseElement();

            foreach (GameItem bar in Program.itemDatabase.GetSmithingBars())
            {
                if (GameState.GetPlayerBank().GetInventory().HasItem(bar))
                {
                    builder.OpenElement(27, "a");
                    builder.AddAttribute(28, "class", "dropdown-item");
                    builder.AddAttribute(29, "title", "You have " + GameState.GetPlayerBank().GetInventory().GetAmountOfItem(bar) + " in your bank.");
                    builder.AddAttribute(30, "onclick", new Action(() => SetCurrentBar(bar)));
                    builder.AddContent(31, bar.ItemName);
                    builder.CloseElement();
                }



            }
            builder.CloseElement();
            builder.CloseElement();
        };
    }
    private RenderFragment ShowOtherDropdown(FurnitureSlot slot)
    {
        return builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "dropdown");
            builder.AddAttribute(2, "style", "float:right;margin-right:3px");
            builder.OpenElement(3, "button");

            builder.AddAttribute(4, "class", "btn btn-primary dropdown-toggle");
            builder.AddAttribute(5, "type", "button");
            builder.AddAttribute(6, "id", "dropdownMenuButton");
            builder.AddAttribute(7, "data-toggle", "dropdown");
            builder.AddAttribute(8, "aria-haspopup", "true");
            builder.AddAttribute(9, "aria-expanded", "false");
            builder.AddAttribute(10, "style", "margin-top:-12px;padding:3px");
            builder.OpenElement(11, "img");

            builder.AddAttribute(12, "style", "height:40px;width:40px");
            builder.AddAttribute(13, "src", "data/ItemIcons/Unknown.png");

            builder.AddContent(14, "Set Other");

            builder.CloseElement();
            builder.CloseElement();

            builder.OpenElement(15, "div");
            builder.AddAttribute(16, "class", "dropdown-menu");
            builder.AddAttribute(17, "aria-labelledby", "dropdownMenuButton");
            if(currentOtherItem == null)
            {
                builder.OpenElement(18, "a");
                builder.AddAttribute(19, "class", "dropdown-item");
                builder.AddContent(20, "Select an Item");
                builder.CloseElement();
            }
            else
            {
                builder.OpenElement(18, "a");
                builder.AddAttribute(19, "class", "dropdown-item");
                builder.AddAttribute(19, "title", "You have " + GameState.GetPlayerBank().GetInventory().GetAmountOfItem(currentOtherItem) + " in your bank.");
                builder.AddContent(20, currentOtherItem.ItemName);
                builder.CloseElement();
            }
            builder.OpenElement(21, "div");
            builder.AddAttribute(22, "class", "dropdown-divider");
            builder.CloseElement();

            foreach (KeyValuePair<GameItem, int> item in Extensions.Convert2DArrayToItems(Extensions.To2DArray(slot.FurnitureToBuild.OtherItemCosts), Program.itemDatabase))
            {

                builder.OpenElement(27, "a");
                builder.AddAttribute(28, "class", "dropdown-item");
                builder.AddAttribute(29, "title", "You have " + GameState.GetPlayerBank().GetInventory().GetAmountOfItem(item.Key) + " in your bank.");
                builder.AddAttribute(30, "onclick", new Action(() => SetCurrentOther(item.Key)));
                builder.AddContent(31, item.Key.ItemName);
                builder.CloseElement();




            }
            builder.CloseElement();
            builder.CloseElement();
        };
    }
    private RenderFragment LoadFurnitureSlot(FurnitureSlot slot)
    {
        return builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "card");
            builder.OpenElement(2, "div");
            builder.OpenElement(3, "div");
            builder.AddAttribute(3, "class", "card-header");
            builder.AddAttribute(3, "title", slot.Description);
            if(slot.hasSelected && slot.FurnitureToBuild.IsFinished == false)
            {

                builder.AddContent(6, ShowPlankDropdown());
                builder.AddContent(6, ShowBarDropdown());
                builder.AddContent(6, ShowOtherDropdown(slot));
            }
            builder.AddContent(4, slot.Name);
            builder.CloseElement();
            builder.CloseElement();
            builder.OpenElement(5, "div");
            builder.AddAttribute(6, "class", "card-body");
            if(slot.FurnitureToBuild == null && slot.isFinished == false)
            {
                foreach (Furniture furniture in Program.houseManager.GetAvailableFurnitureForSlot(slot))
                {
                    builder.OpenElement(7, "button");
                    builder.AddAttribute(8, "class", "btn btn-primary");
                    builder.AddAttribute(9, "style", "margin:3px");
                    builder.AddAttribute(10, "title", "");
                    builder.AddAttribute(11, "onclick", new Action(() => BeginBuilding(furniture, slot)));
                    builder.AddContent(12, "Build " + furniture.Name);
                    builder.CloseElement();
                    builder.OpenElement(13, "br");
                    builder.CloseElement();
                }
            }
            else if((slot.Inventory.GetAmountOfBars() < slot.FurnitureToBuild.BarsRequired ||
                    slot.Inventory.GetAmountOfPlanks() < slot.FurnitureToBuild.PlanksRequired) && slot.isFinished == false)
            {

                builder.AddContent(13, LoadItemButtons(slot));
            }
            else if(slot.isFinished == false)
            {
                builder.OpenElement(7, "p");
                if(((slot.FurnitureToBuild.Progress / (float)slot.FurnitureToBuild.GetWorkRequired()) * 100) < 100)
                {
                    builder.AddContent(7, ((slot.FurnitureToBuild.Progress / (float)slot.FurnitureToBuild.GetWorkRequired()) * 100) + "%");
                }
                else
                {
                    builder.AddContent(7, "Complete!");
                }

                builder.CloseElement();
                builder.OpenElement(7, "button");
                builder.AddAttribute(8, "class", "btn btn-primary");
                builder.AddAttribute(9, "style", "");
                builder.AddAttribute(10, "title", "");
                if(GameState.gatherTimer == null && ((slot.FurnitureToBuild.Progress / (float)slot.FurnitureToBuild.GetWorkRequired()) * 100) < 100)
                {
                    builder.AddAttribute(11, "onclick", new Action(() => Construct(slot.FurnitureToBuild)));
                    builder.AddContent(12, "Begin Constructing " + slot.FurnitureToBuild.Name);
                }
                else if(((slot.FurnitureToBuild.Progress / (float)slot.FurnitureToBuild.GetWorkRequired()) * 100) >= 100)
                {
                    builder.AddAttribute(11, "onclick", new Action(() => CompleteFurniture(slot)));
                    builder.AddContent(12, "Complete " + slot.FurnitureToBuild.Name);
                }
                else
                {
                    builder.AddAttribute(11, "onclick", new Action(() => GameState.StopActions()));
                    builder.AddContent(12, "Stop Constructing");
                }

                builder.CloseElement();
                builder.OpenElement(7, "button");
                builder.AddAttribute(8, "class", "btn btn-primary");
                builder.AddAttribute(9, "style", "");
                builder.AddAttribute(10, "title", "");
                builder.AddAttribute(11, "onclick", new Action(() => CancelBuild(slot)));
                builder.AddContent(12, "Cancel" );
                builder.CloseElement();
            }
            else
            {
                builder.OpenElement(7, "p");
                if(slot.FurnitureToBuild.LastWithdrawn == null || DateTime.UtcNow.Subtract(slot.FurnitureToBuild.LastWithdrawn).Ticks < slot.FurnitureToBuild.WithdrawEvery.Ticks)
                {
                    builder.OpenElement(7, "button");
                    builder.AddAttribute(8, "class", "btn btn-primary");
                    builder.AddAttribute(9, "style", "margin:3px");
                    builder.AddAttribute(10, "title", "");
                    builder.AddAttribute(11, "onclick", new Action(() => Withdraw(slot)));
                    builder.AddContent(12, "Take " + slot.FurnitureToBuild.WithdrawItem);
                    builder.CloseElement();
                    builder.OpenElement(13, "br");
                    builder.CloseElement();
                }
                builder.CloseElement();
            }
            builder.CloseElement();
            builder.CloseElement();
        };
    }
    private RenderFragment LoadItemButtons(FurnitureSlot slot)
    {
        return builder =>
        {
            builder.OpenElement(7, "p");
            builder.OpenElement(8, "p");
            builder.AddContent(9, "Current Planks:" + slot.Inventory.GetAmountOfPlanks() + "/" + slot.FurnitureToBuild.PlanksRequired);
            builder.CloseElement();
            builder.OpenElement(10, "p");
            builder.AddContent(11, "Current Bars:" + slot.Inventory.GetAmountOfBars() + "/" + slot.FurnitureToBuild.BarsRequired);
            builder.CloseElement();
            if(slot.FurnitureToBuild.OtherItemCosts != null)
            {
                foreach (KeyValuePair<GameItem, int> item in Extensions.Convert2DArrayToItems(Extensions.To2DArray(slot.FurnitureToBuild.OtherItemCosts), Program.itemDatabase))
                {
                    builder.OpenElement(27, "p");
                    builder.AddAttribute(29, "title", "You have " + GameState.GetPlayerBank().GetInventory().GetAmountOfItem(item.Key) + " in your bank.");
                    builder.AddContent(31, item.Key.ItemName + ":" + slot.Inventory.GetAmountOfItem(item.Key) + "/" + slot.FurnitureToBuild.GetCostOfItem(item.Key.Id));
                    builder.CloseElement();
                }
            }

            builder.CloseElement();
            builder.OpenElement(12, "button");
            builder.AddAttribute(13, "class", "btn btn-primary");
            builder.AddAttribute(14, "style", "margin:3px");

            builder.AddAttribute(16, "onclick", new Action(() => LoadPlanks(slot)));
            if(currentPlank != null && GameState.GetPlayerBank().GetInventory().GetAmountOfItem(currentPlank) > 0)
            {
                builder.AddAttribute(17, "title", "You have " + GameState.GetPlayerBank().GetInventory().GetAmountOfItem(currentPlank) + " in the bank.");
                builder.AddContent(17, "Load with " + currentPlank.ItemName + "s");

            }
            else if(currentPlank != null && GameState.GetPlayerBank().GetInventory().GetAmountOfItem(currentPlank) == 0)
            {
                builder.AddAttribute(17, "disabled", true);
                builder.AddAttribute(17, "title", "You don't have any " + currentPlank.ItemName + "s.");
                builder.AddContent(17, "Load with Planks");
            }
            else
            {
                builder.AddAttribute(17, "disabled", true);
                builder.AddAttribute(17, "title", "You need to set a plank before loading any.");
                builder.AddContent(17, "Load with Planks");
            }
            builder.CloseElement();
            builder.OpenElement(18, "br");
            builder.CloseElement();
            builder.OpenElement(12, "button");
            builder.AddAttribute(13, "class", "btn btn-primary");
            builder.AddAttribute(14, "style", "margin:3px");
            builder.AddAttribute(15, "title", "");
            builder.AddAttribute(16, "onclick", new Action(() => LoadBars(slot)));
            if(currentBar != null)
            {
                builder.AddAttribute(17, "title", "You have " + GameState.GetPlayerBank().GetInventory().GetAmountOfItem(currentBar) + " in the bank.");
                builder.AddContent(17, "Load with " + currentBar.ItemName + "s");

            }
            else if(currentBar != null && GameState.GetPlayerBank().GetInventory().GetAmountOfItem(currentBar) == 0)
            {
                builder.AddAttribute(17, "disabled", true);
                builder.AddAttribute(17, "title", "You don't have any " + currentBar.ItemName + "s.");
                builder.AddContent(17, "Load with " + currentBar.ItemName + "s");
            }
            else
            {
                builder.AddAttribute(17, "disabled", true);
                builder.AddAttribute(17, "title", "You need to set a plank before loading any.");
                builder.AddContent(17, "Load with Bars");
            }
            builder.CloseElement();
            builder.OpenElement(18, "br");
            builder.CloseElement();
            if(slot.FurnitureToBuild.OtherItemCosts != null)
            {
                builder.OpenElement(18, "button");
                builder.AddAttribute(19, "class", "btn btn-primary");
                builder.AddAttribute(20, "style", "margin:3px");

                if(currentOtherItem != null && slot.Inventory.GetAmountOfItem(currentOtherItem) < slot.FurnitureToBuild.GetCostOfItem(currentOtherItem.Id) && GameState.GetPlayerBank().GetInventory().HasItem(currentOtherItem))
                {
                    builder.AddAttribute(22, "onclick", new Action(() => LoadOther(slot)));
                }
                else if(currentOtherItem != null && GameState.GetPlayerBank().GetInventory().HasItem(currentOtherItem) == false)
                {
                    builder.AddAttribute(21, "title", "You don't have any " + currentOtherItem.ItemName + " in your bank.");
                    builder.AddAttribute(22, "disabled", true);
                }
                else
                {
                    builder.AddAttribute(21, "title", "You already have enough of this item loaded.");
                    builder.AddAttribute(22, "disabled", true);
                }
                builder.AddContent(23, "Load with Required Items" );
                builder.CloseElement();
            }
            builder.OpenElement(7, "button");
            builder.AddAttribute(8, "class", "btn btn-primary");
            builder.AddAttribute(9, "style", "float:right;margin:10px");
            builder.AddAttribute(10, "title", "");
            builder.AddAttribute(11, "onclick", new Action(() => CancelBuild(slot)));
            builder.AddContent(12, "Cancel" );
            builder.CloseElement();
        };
    }
    public void BeginBuilding(Furniture furniture, FurnitureSlot slot)
    {
        slot.SetFurniture(furniture);
        slot.hasSelected = true;
        GameState.UpdateState();
    }
    public void CompleteFurniture(FurnitureSlot slot)
    {
        slot.isFinished = true;
        slot.FurnitureToBuild.IsFinished = true;
        GameState.UpdateState();
    }
    public void AddMaterials(FurnitureSlot slot)
    {
        LoadPlanks(slot);
        LoadBars(slot);
        LoadOther(slot);
        GameState.UpdateState();
    }
    public void Withdraw(FurnitureSlot slot)
    {
        if (GameState.GetPlayerInventory().AddItem(slot.FurnitureToBuild.WithdrawItem))
        {
            slot.FurnitureToBuild.LastWithdrawn = DateTime.UtcNow;
        }
        GameState.UpdateState();
    }
    public void SetCurrentPlank(GameItem item)
    {
        currentPlank = item;
        GameState.UpdateState();
    }
    public void SetCurrentBar(GameItem item)
    {
        currentBar = item;
        GameState.UpdateState();
    }
    public void SetCurrentOther(GameItem item)
    {
        currentOtherItem = Program.itemDatabase.GetItemByID(item.Id);
        GameState.UpdateState();
    }
    private void LoadPlanks(FurnitureSlot slot)
    {

        if(currentPlank != null && slot.Inventory.GetAmountOfPlanks() < slot.FurnitureToBuild.PlanksRequired)
        {
            int amount = Math.Min(GameState.GetPlayerBank().GetInventory().GetAmountOfItem(currentPlank), (slot.FurnitureToBuild.PlanksRequired - slot.Inventory.GetAmountOfPlanks()));
            GameState.GetPlayerBank().GetInventory().RemoveAsManyItemsAsPossible(currentPlank, amount);
            slot.Inventory.AddMultipleOfItem(currentPlank, amount);
            MessageManager.AddMessage("Added " + amount + " " + currentPlank.ItemName + "s to " + slot.Name);
            if(GameState.GetPlayerBank().GetInventory().GetAmountOfItem(currentPlank) == 0)
            {
                SetCurrentPlank(GameState.GetPlayerBank().GetInventory().GetLowestLevelPlank());
            }
        }

        GameState.UpdateState();
    }
    private void LoadBars(FurnitureSlot slot)
    {
        if(currentBar != null && slot.Inventory.GetAmountOfBars() < slot.FurnitureToBuild.BarsRequired)
        {
            int amount = Math.Min(GameState.GetPlayerBank().GetInventory().GetAmountOfItem(currentBar), (slot.FurnitureToBuild.BarsRequired - slot.Inventory.GetAmountOfBars()));
            GameState.GetPlayerBank().GetInventory().RemoveAsManyItemsAsPossible(currentBar, amount);
            slot.Inventory.AddMultipleOfItem(currentBar, amount);
            MessageManager.AddMessage("Added " + amount + " " + currentBar.ItemName + "s to " + slot.Name);
            if (GameState.GetPlayerBank().GetInventory().GetAmountOfItem(currentBar) == 0)
            {
                SetCurrentBar(GameState.GetPlayerBank().GetInventory().GetLowestLevelBar());
            }

        }
        GameState.UpdateState();
    }
    private void ToggleUsePlankOption()
    {
        useLowestPlank = !useLowestPlank;
        if (useLowestPlank)
        {
            SetCurrentPlank(GameState.GetPlayerBank().GetInventory().GetLowestLevelPlank());
        }
        GameState.UpdateState();
    }
    private void ToggleUseBarOption()
    {
        useLowestBar = !useLowestBar;
        if (useLowestBar)
        {
            SetCurrentBar(GameState.GetPlayerBank().GetInventory().GetLowestLevelBar());
        }
        GameState.UpdateState();
    }
    private void LoadOther(FurnitureSlot slot)
    {
        if(currentOtherItem != null && slot.Inventory.GetAmountOfItem(currentOtherItem) < slot.FurnitureToBuild.GetCostOfItem(currentOtherItem.Id))
        {
            int amount = Math.Min(GameState.GetPlayerBank().GetInventory().GetAmountOfItem(currentOtherItem), (slot.FurnitureToBuild.GetCostOfItem(currentOtherItem.Id) - slot.Inventory.GetAmountOfItem(currentOtherItem)));
            GameState.GetPlayerBank().GetInventory().RemoveAsManyItemsAsPossible(currentOtherItem, amount);
            slot.Inventory.AddMultipleOfItem(currentOtherItem, amount);
            MessageManager.AddMessage("Added " + amount + " " + currentOtherItem.ItemName + " to " + slot.Name);

        }

        GameState.UpdateState();
    }
    public void Construct(Furniture furniture)
    {
        GameState.StopActions();
        GameState.isGathering = true;
        GameState.gatherTimer = new Timer(new TimerCallback(_ =>
        {
            if(furniture.Progress < furniture.GetWorkRequired())
            {
                GameItem nail = GameState.GetPlayerInventory().GetBestNails();
                if(nail == null)
                {
                    MessageManager.AddMessage("You have run out of nails.");
                    GameState.StopActions();
                    return;
                }
                int level = GameState.GetPlayer().GetLevel("Construction");
                int nailsUsed = Math.Min(rand.Next(1, 1 + Math.Max(100 - level, 1)), GameState.GetPlayerInventory().GetAmountOfItem(nail));
                furniture.Progress += nail.NailLevel;
                GameState.GetPlayer().GainExperience("Construction", nail.NailLevel);
                nailsUsed = GameState.GetPlayerInventory().RemoveAsManyItemsAsPossible(nail, nailsUsed);
                MessageManager.AddMessage("You hammer two planks together with " + nailsUsed + " " + nail.ItemName);
            }
            else
            {
                furniture.IsFinished = true;
                GameState.StopActions();
            }
            GameState.UpdateState();

        }), null, 500, 500);
        GameState.UpdateState();

    }
    private void AddSlot(FurnitureSlot slot)
    {
        FurnitureSlot newSlot = new FurnitureSlot(slot);
        Program.houseManager.emptySlots.Add(newSlot);
        GameState.UpdateState();
    }
    private int GetSlotMinimumLevel(FurnitureSlot slot)
    {
        return 0;
    }
    private void CancelBuild(FurnitureSlot slot)
    {
        foreach(KeyValuePair<GameItem, int> pair in slot.Inventory.GetItems())
        {
            GameState.GetPlayerBank().GetInventory().AddMultipleOfItem(pair.Key, pair.Value);
        }
        if (Program.houseManager.emptySlots.Remove(slot))
        {
            MessageManager.AddMessage("You have cancelled building the " + slot.Name + " and any materials you used have been returned to the bank.");
        }
        else
        {
            MessageManager.AddMessage("Failed to remove slot because it wasnt event there.");
        }

        GameState.UpdateState();

    }
    protected override void OnInitialized()
    {

        GameState.StateChanged += OnGameStateChanged;
        this.StateHasChanged();
    }
    void IDisposable.Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
@page "/House"
@using System.Threading;
@inject HttpClient Http
@inject GameState GameState
@inject MessageManager  MessageManager
@inject Microsoft.AspNetCore.Blazor.Services.WebAssemblyUriHelper UriHelper
@implements IDisposable

<h1>Welcome Home</h1>

@LoadBuildDropdown()
@foreach(FurnitureSlot slot in emptySlots)
{
    @LoadFurnitureSlot(slot)
}



@functions{

    private List<FurnitureSlot> emptySlots = new List<FurnitureSlot>();


    private RenderFragment LoadBuildDropdown()
    {
        return builder =>
        {
            builder.OpenElement(0, "p");

            builder.OpenElement(1, "div");
            builder.AddAttribute(2, "class", "dropdown");
            builder.AddAttribute(2, "style", "margin-bottom:10px");
            builder.OpenElement(3, "button");

            builder.AddAttribute(4, "class", "btn btn-primary dropdown-toggle");
            builder.AddAttribute(5, "type", "button");
            builder.AddAttribute(6, "id", "dropdownMenuButton");
            builder.AddAttribute(7, "data-toggle", "dropdown");
            builder.AddAttribute(8, "aria-haspopup", "true");
            builder.AddAttribute(9, "aria-expanded", "false");
            if (GameState.isGathering)
            {
                builder.AddAttribute(10, "disabled", true);
            }

            builder.AddContent(11, "Plan a new furniture slot");

            builder.CloseElement();

            builder.OpenElement(12, "div");
            builder.AddAttribute(13, "class", "dropdown-menu");
            builder.AddAttribute(14, "aria-labelledby", "dropdownMenuButton");


            foreach (FurnitureSlot slot in Program.houseManager.furnitureSlots)
            {
                if (GetSlotMinimumLevel(slot) <= GameState.GetPlayer().GetLevel("Construction"))
                {

                    builder.OpenElement(15, "a");
                    builder.AddAttribute(16, "class", "dropdown-item");
                    builder.AddAttribute(17, "onclick", new Action(() => AddSlot(slot)));
                    builder.AddContent(18, slot.Name);
                    builder.CloseElement();
                }

            }
            builder.CloseElement();
            builder.CloseElement();
            builder.CloseElement();
        };
    }
    private RenderFragment LoadFurnitureSlot(FurnitureSlot slot)
    {
        return builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "card");
            builder.OpenElement(2, "div");
            builder.AddAttribute(3, "class", "card-header");
            builder.AddAttribute(3, "title", slot.Description);
            builder.AddContent(4, slot.Name);
            builder.CloseElement();
            builder.OpenElement(5, "div");
            builder.AddAttribute(6, "class", "card-body");
            if(slot.FurnitureToBuild == null)
            {
                foreach (Furniture furniture in Program.houseManager.GetAvailableFurnitureForSlot(slot))
                {
                    builder.OpenElement(7, "button");
                    builder.AddAttribute(8, "class", "btn btn-primary");
                    builder.AddAttribute(9, "style", "");
                    builder.AddAttribute(10, "title", "");
                    builder.AddAttribute(11, "onclick", new Action(() => BeginBuilding(furniture, slot)));
                    builder.AddContent(12, "Build " + furniture.Name);
                    builder.CloseElement();
                }
            }
            else
            {
                builder.OpenElement(7, "button");
                builder.AddAttribute(8, "class", "btn btn-primary");
                builder.AddAttribute(9, "style", "");
                builder.AddAttribute(10, "title", "");
                builder.AddAttribute(11, "onclick", new Action(() => Construct(slot.FurnitureToBuild)));
                builder.AddContent(12, "Begin Constructing " + slot.FurnitureToBuild.Name);
                builder.CloseElement();
                builder.OpenElement(7, "button");
                builder.AddAttribute(8, "class", "btn btn-primary");
                builder.AddAttribute(9, "style", "");
                builder.AddAttribute(10, "title", "");
                builder.AddAttribute(11, "onclick", new Action(() => CancelBuilding(slot)));
                builder.AddContent(12, "Cancel" );
                builder.CloseElement();
            }

            builder.CloseElement();
            builder.CloseElement();
        };
    }
    public void BeginBuilding(Furniture furniture, FurnitureSlot slot)
    {
        slot.FurnitureToBuild = furniture;
        GameState.UpdateState();
    }
    public void CancelBuilding(FurnitureSlot slot)
    {
        slot.FurnitureToBuild = null;
        GameState.UpdateState();
    }
    public void Construct(Furniture furniture)
    {
        GameState.StopActions();
        GameState.gatherTimer = new Timer(new TimerCallback(_ =>
        {

        }), null, 500, 500);
    }
    private void AddSlot(FurnitureSlot slot)
    {
        emptySlots.Add(slot);
        GameState.UpdateState();
    }
    private int GetSlotMinimumLevel(FurnitureSlot slot)
    {
        return 0;
    }
    protected override void OnInitialized()
    {

        GameState.StateChanged += OnGameStateChanged;
        this.StateHasChanged();
    }
    void IDisposable.Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
@page "/{thisArea}/Dojo/"
@inject HttpClient Http
@inject GameState GameState
@inject MessageManager  MessageManager
@inject NavigationManager UriHelper
@using System.Threading;
@implements IDisposable

@if (Program.battleManager.battleStarted == false)
{
    <button class="btn btn-primary" style="margin-bottom:10px" onclick="@(new Action(() => Return(GameState.previousURL)))">Leave</button>
}
@if (dojo != null)
{
    <p>@dojo.Description</p>
}
@LoadMenu()


@functions{

    [Parameter]
    public string thisArea { get; set; }
    private Area area;
    private static Random rand = new Random();
    private int currentWave = 0;
    private List<int> monsters = new List<int>();
    private Dojo dojo;

    private RenderFragment LoadMenu()
    {
        return builder =>
        {
            builder.OpenElement(0, "p");
            if (area != null && dojo != null)
            {
                if (dojo.BeginChallenge)
                {
                    if (Program.battleManager.currentDojoWave < dojo.OpponentIDs.Count)
                    {
                        builder.AddContent(1, LoadCurrentOpponent());
                    }
                    else
                    {
                        builder.AddContent(1, LoadDojoHall());
                    }
                }
                else
                {
                    builder.AddContent(1, LoadDojoHall());
                }
            }
            builder.CloseElement();

        };
    }
    private RenderFragment LoadDojoHall()
    {
        return builder =>
        {
            if (dojo.NPCIDs != null)
            {
                foreach (int i in dojo.NPCIDs)
                {
                    NPC npc = Program.npcManager.GetNPCByID(i);
                    builder.OpenElement(0, "button");
                    builder.AddAttribute(1, "class", "btn btn-warning");
                    builder.AddAttribute(2, "style", "");
                    builder.AddAttribute(3, "onclick", new Action(() => SpeakToNPC(npc)));
                    builder.AddContent(4, "Speak to " + npc.Name);
                    builder.CloseElement();
                    builder.OpenElement(5, "br");
                    builder.CloseElement();
                }
            }
            builder.OpenElement(5, "br");
            builder.CloseElement();
            builder.OpenElement(6, "button");
            builder.AddAttribute(7, "class", "btn btn-primary");
            builder.AddAttribute(8, "style", "");
            if (dojo.LastWonTime == null || DateTime.UtcNow.CompareTo(dojo.LastWonTime.Value.AddHours(23)) > 0)
            {
                builder.AddAttribute(9, "onclick", new Action(() => SetReadyForChallenge()));
                builder.AddContent(10, "Begin Dojo Challenge");
            }
            else
            {
                if (Math.Abs(DateTime.UtcNow.Subtract(dojo.LastWonTime.Value.AddDays(1)).TotalHours) > 1)
                {
                    builder.AddAttribute(11, "title", "The dojo is still recovering from their last defeat. Please return in " + Math.Round(Math.Abs(DateTime.UtcNow.Subtract(dojo.LastWonTime.Value.AddHours(23)).TotalHours)) + " hours.");
                }
                else
                {
                    builder.AddAttribute(11, "title", "The dojo is still recovering from their last defeat. Please return in " + Math.Round(Math.Abs(DateTime.UtcNow.Subtract(dojo.LastWonTime.Value.AddDays(1)).TotalMinutes)) + " minutes.");
                }
                builder.AddAttribute(12, "disabled", true);
                builder.AddContent(13, "Begin Dojo Challenge");
            }
            builder.CloseElement();
        };
    }
    private RenderFragment LoadCurrentOpponent()
    {
        return builder =>
        {
            if (Program.battleManager.battleStarted == false)
            {
                builder.OpenElement(0, "p");
                builder.AddContent(1, Program.battleManager.GetMonsterByID(dojo.OpponentIDs[Program.battleManager.currentDojoWave]).Name);
                builder.CloseElement();
                builder.OpenElement(2, "button");
                builder.AddAttribute(3, "class", "btn btn-primary");
                builder.AddAttribute(4, "style", "");
                builder.AddAttribute(5, "onclick", new Action(() => StartBattle()));
                builder.AddContent(6, "Fight");
                builder.CloseElement();
            }
            else
            {
                builder.OpenElement(0, "p");
                string name = Program.battleManager.GetMonsterByID(dojo.OpponentIDs[Program.battleManager.currentDojoWave]).Name;
                if (Program.battleManager.opponent.ChangesStances)
                {
                    name += "(" + Program.battleManager.GetStyleName(Program.battleManager.opponent.CurrentStance) + ")";
                }
                builder.AddContent(1, name);
                builder.CloseElement();
                builder.AddContent(2, LoadHPBars());
            }
        };
    }
    private RenderFragment LoadHPBars()
    {
        return builder =>
        {
            builder.OpenElement(0, "p");
            builder.OpenElement(1, "span");
            builder.AddAttribute(1, "style", "float:left");
            builder.AddContent(1, Program.battleManager.opponent.CurrentHP + "/" + Program.battleManager.opponent.HP);
            builder.CloseElement();
            builder.OpenElement(1, "span");
            builder.AddAttribute(1, "style", "float:right");
            builder.AddContent(1, GameState.GetPlayer().CurrentHP + "/" + GameState.GetPlayer().MaxHP);
            builder.CloseElement();
            builder.CloseElement();
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "progress");
            builder.OpenElement(2, "div");
            builder.AddAttribute(3, "class", "progress-bar bg-success");
            builder.AddAttribute(4, "style", "width:" + ((float)Program.battleManager.opponent.CurrentHP / Program.battleManager.opponent.HP) * 100 + "%");
            builder.AddAttribute(5, "role", "progressbar");
            builder.AddAttribute(6, "aria-valuenow", "" + ((float)Program.battleManager.opponent.CurrentHP / Program.battleManager.opponent.HP) * 100);
            builder.AddAttribute(7, "aria-valuemin", "0");
            builder.AddAttribute(8, "aria-valuemax", "" + Program.battleManager.opponent.HP);
            builder.CloseElement();
            builder.CloseElement();
        };
    }
    private void SpeakToNPC(NPC npc)
    {
        MessageManager.AddMessage(npc.SpokenText);
    }
    private void StartBattle()
    {
        Program.battleManager.StartDojoBattle(dojo);
    }
    public void SetArea(string areaURL)
    {
        area = Program.areaManager.GetAreaByURL(areaURL);
        Program.battleManager.currentDojoWave = 0;
        LoadDojo(area.DojoID);
        StateHasChanged();
        GameState.UpdateState();
    }
    protected override void OnParametersSet()		
    {		
        SetArea(thisArea);		
    }
    public void SetReadyForChallenge()
    {
         dojo.BeginChallenge = true;		
        GameState.UpdateState();
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
        this.StateHasChanged();
    }
    private void LoadDojo(int id)		
    {		
        dojo = Program.battleManager.GetDojoByID(id);		
    }		
    private void Return(string url)		
    {		
        GameState.StopActions();		
        UriHelper.NavigateTo("/GatherMenu/" + url);		
    }
    void IDisposable.Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
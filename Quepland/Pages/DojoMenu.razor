@page "/{thisArea}/Dojo/"
@inject HttpClient Http
@inject GameState GameState
@inject MessageManager  MessageManager
@using System.Threading;
@implements IDisposable

@LoadMenu()


@functions{

    [Parameter]
    private string thisArea { get; set; }
    private Area area;
    private static Random rand = new Random();
    private int currentWave = 0;
    private List<int> monsters = new List<int>();

    private RenderFragment LoadMenu()
    {
        return builder =>
        {
            builder.OpenElement(0, "p");
            builder.AddContent(1, LoadCurrentOpponent());
            builder.CloseElement();

        };
    }
    private RenderFragment LoadCurrentOpponent()
    {
        return builder =>
        {
            builder.OpenElement(0, "p");
            builder.AddContent(1, Program.battleManager.GetMonsterByID(monsters[currentWave]).Name);
            builder.CloseElement();
            builder.OpenElement(2, "button");
            builder.AddAttribute(3, "class", "btn btn-primary");
            builder.AddAttribute(4, "style", "");
            builder.AddAttribute(5, "onclick", new Action(() => StartBattle()));
            builder.AddContent(6, "Start Battle");
            builder.CloseElement();
        };
    }
    private void StartBattle()
    {

    }
    public void SetArea(string areaURL)
    {
        area = Program.areaManager.GetAreaByURL(areaURL);
        StateHasChanged();
        GameState.UpdateState();
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
        this.StateHasChanged();
    }
    void IDisposable.Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
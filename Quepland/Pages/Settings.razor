@page "/Settings"
@inject HttpClient Http
@inject GameState GameState
@inject MessageManager MessageManager
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject Blazored.LocalStorage.ILocalStorageService asyncLocalStorage
@inject Microsoft.AspNetCore.Blazor.Services.WebAssemblyUriHelper UriHelper
@using System.Threading;
@implements IDisposable

<h1>Settings</h1>

<p><button class="btn btn-primary" onclick="@(new Action(() => GameState.ToggleSplitView()))">Toggle Split View</button> @GetOnOrOff(GameState.isSplitView)</p>
<p><button class="btn btn-primary" onclick="@(new Action(() => GameState.ToggleBankStyle()))">Toggle Compact Bank View</button>@GetOnOrOff(GameState.compactBankView)</p>

<p>Set limit for selling confirmation:<input type="number" @bind-value="@Limit" @bind-value:event="onchange" /> Current:@GameState.expensiveItemThreshold</p>

<div style="background-color:#dbdbdb;margin-bottom:20px">
    <p><button class="btn btn-primary" style="margin-left:10px;margin-top:10px" onclick="@(new Action(() => GenerateSaveFile()))">Generate Save File</button></p>
<textarea style="margin-left:10px;margin-top:10px" >@quickFixString</textarea>
</div>

<div style="background-color:#dbdbdb">
    <p><button class="btn btn-primary" style="margin-left:10px;margin-top:10px" onclick="@(new Action(() => LoadDataFromText()))">Load From Save File</button></p>
    
    <div style="margin-left:10px;margin-top:10px">
        <EditForm Model="@saveModel">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputTextArea id="name" @bind-Value="@saveModel.saveFile" />

        </EditForm>
    </div>
</div>


@if (Program.playfabManager.IsConnected)
{
    <p>
        <button class="btn btn-primary" onclick="@(new Action(() => LoadDataFromCloud()))">Load Game From Cloud Save</button>
    </p>
}
<p><button class="btn btn-primary" onclick="@(new Action(() => GoToSaveManager()))">Save Tester</button></p>


@functions{

    private SaveModel saveModel = new SaveModel();
    private SimpleAES Encryptor = new SimpleAES();
    private string savefile = "Copy the generated save to a safe place.";
    private string loadfile = "";
    private string quickFixString = "";
    public int Limit
    {
        get
        {
            return GameState.expensiveItemThreshold;
        }
        set
        {
            GameState.expensiveItemThreshold = Math.Max(value, 0);
        }
    }
    private bool GenerateSaveFile()
    {
        savefile = GetSaveDataString();
        quickFixString = savefile;
        this.StateHasChanged();
        return true;
    }
    private void GoToSaveManager()
    {
        UriHelper.NavigateTo("/SaveManager/");
    }
    public string GetSaveDataString()
    {

        return Program.saveManager.GetSaveString();

    }
    public async void LoadDataFromCloud()
    {
        string data = await Program.playfabManager.LoadData();
        saveModel.saveFile = Encryptor.EncryptToString(data);
        LoadDataFromText();
    }
    private void LoadDataFromText()
    {
        string data = "";
        try
        {
            data = saveModel.saveFile;
        }
        catch
        {
            MessageManager.AddMessage("Failed to load from file. ");
            return;
        }
        Program.saveManager.LoadDataFromString(data);
        Program.saveManager.StartAutosaving();
        GameState.UpdateState();
        this.StateHasChanged();
    }
    private async Task ConnectToCloudAndSave()
    {
        await ConnectToKongregate();
        await Program.playfabManager.TryLogin(GameState.userID, GameState.token);
    }
    private async Task ConnectToKongregate()
    {
        try
        {
            GameState.userID = await JSRuntime.InvokeAsync<string>("kongregateFunctions.getUserID");
            GameState.token = await JSRuntime.InvokeAsync<string>("kongregateFunctions.getToken");
        }
        catch
        {

            GameState.userID = "";
            GameState.token = "";

        }
    }
    private void SaveData()
    {
        while (!GameState.safeToSave)
        {
            Thread.Sleep(5);
        }

        SaveDataEncrypted();

        MessageManager.AddMessage("Your game has been saved.");
        GameState.saveDataLoaded = true;
        GameState.saveGameExists = true;

    }
    private async void UpdateHighScores()
    {
        if (GameState.submitHighScores)
        {
            await JSRuntime.InvokeAsync<object>("kongregateFunctions.updateTotalLevelScore", GameState.GetPlayer().GetTotalLevel());
            await JSRuntime.InvokeAsync<object>("kongregateFunctions.updateTotalKills", GameState.totalKills);
        }

    }
    private string SaveDataEncrypted()
    {
        localStorage.SetItem("eSave", GetSaveDataString());
        UpdateHighScores();
        return "";
    }
    private string GetOnOrOff(bool value)
    {
        if (value == true)
        {
            return "On";
        }
        else
        {
            return "Off";
        }
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
        this.StateHasChanged();
    }
    void IDisposable.Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}